#!/usr/bin/env python3
"""
ElevenLabs Conversational AI - Python CLI Application
–ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import asyncio
import logging
import sys
import signal
from pathlib import Path

from config import Config
from audio_handler import AudioHandler
from websocket_client import ElevenLabsWebSocketClient
from utils import setup_logging, print_banner, print_help

logger = logging.getLogger(__name__)

class VoiceAssistant:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.config = Config()
        self.audio_handler = None
        self.ws_client = None
        self.is_running = False
        self.is_listening = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.audio_handler = AudioHandler(
                sample_rate=self.config.SAMPLE_RATE,
                chunk_size=self.config.CHUNK_SIZE,
                channels=self.config.CHANNELS
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
            self.ws_client = ElevenLabsWebSocketClient(
                api_key=self.config.ELEVENLABS_API_KEY,
                agent_id=self.config.ELEVENLABS_AGENT_ID,
                audio_handler=self.audio_handler
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ElevenLabs
            await self.ws_client.connect()
            
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def start_conversation(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        self.is_running = True
        
        print("\nüé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤!")
        print("üìã –ö–æ–º–∞–Ω–¥—ã:")
        print("   –ü–†–û–ë–ï–õ - –ù–∞—á–∞—Ç—å/–∑–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–ø–∏—Å—å")
        print("   'q' + ENTER - –í—ã—Ö–æ–¥")
        print("   'h' + ENTER - –ü–æ–º–æ—â—å")
        print("   's' + ENTER - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("\nüí¨ –ù–∞—á–Ω–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
        input_task = asyncio.create_task(self.handle_input())
        
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.is_running:
                await asyncio.sleep(0.1)
                
        except KeyboardInterrupt:
            logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        finally:
            input_task.cancel()
            await self.cleanup()
    
    async def handle_input(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        try:
            while self.is_running:
                try:
                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤–≤–æ–¥–∞
                    line = await asyncio.to_thread(input, "")
                    command = line.strip().lower()
                    
                    if command == 'q':
                        logger.info("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                        self.is_running = False
                        break
                    elif command == 'h':
                        print_help()
                    elif command == 's':
                        await self.print_statistics()
                    elif command == 'r':
                        await self.toggle_recording()
                    elif command == '':
                        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                        await self.toggle_recording()
                    else:
                        print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                        
                except EOFError:
                    # Ctrl+D
                    self.is_running = False
                    break
                    
        except asyncio.CancelledError:
            pass
    
    async def toggle_recording(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        if not self.is_listening:
            await self.start_listening()
        else:
            await self.stop_listening()
    
    async def start_listening(self):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏"""
        if self.is_listening:
            return
            
        try:
            print("üé§ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å... (–Ω–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            self.is_listening = True
            await self.audio_handler.start_recording()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {e}")
            self.is_listening = False
    
    async def stop_listening(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        if not self.is_listening:
            return
            
        try:
            print("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–ø–∏—Å—å...")
            self.is_listening = False
            await self.audio_handler.stop_recording()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
    
    async def print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.ws_client:
            stats = self.ws_client.get_statistics()
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if stats['connected'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}")
            print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_sent']}")
            print(f"   üéµ –ê—É–¥–∏–æ —á–∞–Ω–∫–æ–≤: {stats['audio_chunks_sent']}")
            print(f"   üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ: {stats['audio_chunks_received']}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime']:.1f}—Å")
            print()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        if self.is_listening:
            await self.stop_listening()
        
        if self.audio_handler:
            await self.audio_handler.cleanup()
        
        if self.ws_client:
            await self.ws_client.disconnect()
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    # asyncio.get_event_loop().stop()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    # –ë–∞–Ω–Ω–µ—Ä
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Config()
    if not config.validate():
        logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        return 1
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    assistant = VoiceAssistant()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await assistant.initialize():
            return 1
        
        # –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        await assistant.start_conversation()
        
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    finally:
        await assistant.cleanup()

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
