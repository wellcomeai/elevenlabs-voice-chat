"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è ElevenLabs Conversational AI
"""

import os
import logging
from pathlib import Path
from typing import Optional

logger = logging.getLogger(__name__)

class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        self._load_env_file()
        
        # ElevenLabs –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY", "")
        self.ELEVENLABS_AGENT_ID = os.getenv("ELEVENLABS_AGENT_ID", "agent_01jzwcew2ferttga9m1zcn3js1")
        
        # –ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.SAMPLE_RATE = int(os.getenv("SAMPLE_RATE", "16000"))
        self.CHUNK_SIZE = int(os.getenv("CHUNK_SIZE", "1024"))
        self.CHANNELS = int(os.getenv("CHANNELS", "1"))
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
        self.LOG_FILE = os.getenv("LOG_FILE", "")
        
        # –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.WEBSOCKET_TIMEOUT = int(os.getenv("WEBSOCKET_TIMEOUT", "30"))
        self.RECONNECT_ATTEMPTS = int(os.getenv("RECONNECT_ATTEMPTS", "5"))
        self.HEARTBEAT_INTERVAL = int(os.getenv("HEARTBEAT_INTERVAL", "30"))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.DEBUG = os.getenv("DEBUG", "false").lower() == "true"
        self.ENABLE_VAD_DISPLAY = os.getenv("ENABLE_VAD_DISPLAY", "true").lower() == "true"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        self._validate_config()
    
    def _load_env_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞"""
        env_file = Path(".env")
        if env_file.exists():
            try:
                with open(env_file, 'r') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            os.environ.setdefault(key.strip(), value.strip())
                
                logger.debug("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
    
    def _validate_config(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.validation_errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
        if not self.ELEVENLABS_API_KEY:
            self.validation_errors.append("ELEVENLABS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        elif len(self.ELEVENLABS_API_KEY) < 20:
            self.validation_errors.append("ELEVENLABS_API_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Agent ID
        if not self.ELEVENLABS_AGENT_ID:
            self.validation_errors.append("ELEVENLABS_AGENT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if self.SAMPLE_RATE not in [8000, 16000, 22050, 24000, 44100]:
            self.validation_errors.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {self.SAMPLE_RATE}")
        
        if self.CHUNK_SIZE < 128 or self.CHUNK_SIZE > 8192:
            self.validation_errors.append(f"–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {self.CHUNK_SIZE}")
        
        if self.CHANNELS not in [1, 2]:
            self.validation_errors.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {self.CHANNELS}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if self.WEBSOCKET_TIMEOUT < 5 or self.WEBSOCKET_TIMEOUT > 300:
            self.validation_errors.append(f"–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞–π–º–∞—É—Ç WebSocket: {self.WEBSOCKET_TIMEOUT}")
        
        if self.RECONNECT_ATTEMPTS < 0 or self.RECONNECT_ATTEMPTS > 20:
            self.validation_errors.append(f"–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {self.RECONNECT_ATTEMPTS}")
    
    def validate(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.validation_errors:
            logger.error("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for error in self.validation_errors:
                logger.error(f"   ‚Ä¢ {error}")
            return False
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        return True
    
    def print_config(self):
        """–í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   üîë API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.ELEVENLABS_API_KEY else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"   ü§ñ Agent ID: {self.ELEVENLABS_AGENT_ID}")
        print(f"   üéµ –ß–∞—Å—Ç–æ—Ç–∞: {self.SAMPLE_RATE} Hz")
        print(f"   üì¶ –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {self.CHUNK_SIZE}")
        print(f"   üîä –ö–∞–Ω–∞–ª—ã: {self.CHANNELS}")
        print(f"   üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤: {self.LOG_LEVEL}")
        print(f"   üîÑ –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {self.RECONNECT_ATTEMPTS}")
        print(f"   üíì Heartbeat: {self.HEARTBEAT_INTERVAL}—Å")
        
        if self.DEBUG:
            print(f"   üêõ Debug —Ä–µ–∂–∏–º: –í–∫–ª—é—á–µ–Ω")
    
    def get_audio_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return {
            "sample_rate": self.SAMPLE_RATE,
            "chunk_size": self.CHUNK_SIZE,
            "channels": self.CHANNELS,
            "format": "PCM 16-bit"
        }
    
    def get_websocket_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ WebSocket –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return {
            "timeout": self.WEBSOCKET_TIMEOUT,
            "reconnect_attempts": self.RECONNECT_ATTEMPTS,
            "heartbeat_interval": self.HEARTBEAT_INTERVAL
        }
    
    def create_env_template(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞"""
        template = f"""# ElevenLabs Conversational AI - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://elevenlabs.io/

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ELEVENLABS_API_KEY=your_api_key_here
ELEVENLABS_AGENT_ID={self.ELEVENLABS_AGENT_ID}

# –ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SAMPLE_RATE={self.SAMPLE_RATE}
CHUNK_SIZE={self.CHUNK_SIZE}
CHANNELS={self.CHANNELS}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL={self.LOG_LEVEL}
LOG_FILE=

# –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBSOCKET_TIMEOUT={self.WEBSOCKET_TIMEOUT}
RECONNECT_ATTEMPTS={self.RECONNECT_ATTEMPTS}
HEARTBEAT_INTERVAL={self.HEARTBEAT_INTERVAL}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEBUG=false
ENABLE_VAD_DISPLAY=true
"""
        return template
    
    def save_env_template(self, filename: str = ".env.example"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞"""
        try:
            template = self.create_env_template()
            
            with open(filename, 'w') as f:
                f.write(template)
            
            logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()
