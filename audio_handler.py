"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –¥–ª—è ElevenLabs Conversational AI
–†–∞–±–æ—Ç–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º –∏ –¥–∏–Ω–∞–º–∏–∫–∞–º–∏
"""

import asyncio
import logging
import base64
import threading
import queue
import numpy as np
from typing import Callable, Optional
import pyaudio

logger = logging.getLogger(__name__)

class AudioHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞"""
    
    def __init__(self, sample_rate: int = 16000, chunk_size: int = 1024, channels: int = 1):
        self.sample_rate = sample_rate
        self.chunk_size = chunk_size
        self.channels = channels
        self.format = pyaudio.paInt16
        
        # PyAudio –æ–±—ä–µ–∫—Ç—ã
        self.pyaudio = None
        self.input_stream = None
        self.output_stream = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_recording = False
        self.is_playing = False
        
        # –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –∞—É–¥–∏–æ
        self.audio_queue = queue.Queue()
        self.playback_queue = queue.Queue()
        
        # Callback —Ñ—É–Ω–∫—Ü–∏–∏
        self.on_audio_chunk: Optional[Callable[[str], None]] = None
        
        # –ü–æ—Ç–æ–∫–∏
        self.recording_thread = None
        self.playback_thread = None
        
        self._initialize_audio()
    
    def _initialize_audio(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PyAudio"""
        try:
            self.pyaudio = pyaudio.PyAudio()
            
            # –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self._find_audio_devices()
            
            logger.info("‚úÖ PyAudio –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PyAudio: {e}")
            raise
    
    def _find_audio_devices(self):
        """–ü–æ–∏—Å–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        logger.info("üîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        
        device_count = self.pyaudio.get_device_count()
        
        for i in range(device_count):
            device_info = self.pyaudio.get_device_info_by_index(i)
            
            if device_info["maxInputChannels"] > 0:
                logger.debug(f"   üé§ –í—Ö–æ–¥ {i}: {device_info['name']}")
            
            if device_info["maxOutputChannels"] > 0:
                logger.debug(f"   üîä –í—ã—Ö–æ–¥ {i}: {device_info['name']}")
    
    async def start_recording(self):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        if self.is_recording:
            return
        
        try:
            logger.info("üé§ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤–≤–æ–¥–∞
            self.input_stream = self.pyaudio.open(
                format=self.format,
                channels=self.channels,
                rate=self.sample_rate,
                input=True,
                frames_per_buffer=self.chunk_size
            )
            
            self.is_recording = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏
            self.recording_thread = threading.Thread(target=self._recording_worker)
            self.recording_thread.daemon = True
            self.recording_thread.start()
            
            logger.info("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {e}")
            self.is_recording = False
            raise
    
    async def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        if not self.is_recording:
            return
        
        try:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–ø–∏—Å—å...")
            
            self.is_recording = False
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if self.recording_thread:
                self.recording_thread.join(timeout=2.0)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
            if self.input_stream:
                self.input_stream.stop_stream()
                self.input_stream.close()
                self.input_stream = None
            
            logger.info("‚úÖ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
    
    def _recording_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏"""
        logger.debug("üîÑ –ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—É—â–µ–Ω")
        
        try:
            while self.is_recording and self.input_stream:
                try:
                    # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                    audio_data = self.input_stream.read(
                        self.chunk_size, 
                        exception_on_overflow=False
                    )
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                    audio_base64 = base64.b64encode(audio_data).decode('utf-8')
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ callback
                    if self.on_audio_chunk:
                        try:
                            self.on_audio_chunk(audio_base64)
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ callback: {e}")
                    
                except Exception as e:
                    if self.is_recording:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
                    break
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        
        logger.debug("üîÑ –ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def play_audio(self, audio_base64: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self.playback_queue.put(audio_base64)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.is_playing:
                await self._start_playback()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
    
    async def _start_playback(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if self.is_playing:
            return
        
        try:
            logger.debug("üîä –ù–∞—á–∏–Ω–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞
            self.output_stream = self.pyaudio.open(
                format=self.format,
                channels=self.channels,
                rate=self.sample_rate,
                output=True,
                frames_per_buffer=self.chunk_size
            )
            
            self.is_playing = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self.playback_thread = threading.Thread(target=self._playback_worker)
            self.playback_thread.daemon = True
            self.playback_thread.start()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            self.is_playing = False
    
    def _playback_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        logger.debug("üîÑ –ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
        
        try:
            while self.is_playing:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    audio_base64 = self.playback_queue.get(timeout=1.0)
                    
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
                    audio_data = base64.b64decode(audio_base64)
                    
                    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                    if self.output_stream:
                        self.output_stream.write(audio_data)
                    
                    self.playback_queue.task_done()
                    
                except queue.Empty:
                    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –¥–æ–ª–≥–æ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    if self.playback_queue.empty():
                        break
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
                    break
        
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
        
        finally:
            self._stop_playback()
        
        logger.debug("üîÑ –ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _stop_playback(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            self.is_playing = False
            
            if self.output_stream:
                self.output_stream.stop_stream()
                self.output_stream.close()
                self.output_stream = None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
    
    def set_audio_callback(self, callback: Callable[[str], None]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        self.on_audio_chunk = callback
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
        await self.stop_recording()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        self._stop_playback()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        if self.playback_thread:
            self.playback_thread.join(timeout=2.0)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º PyAudio
        if self.pyaudio:
            self.pyaudio.terminate()
            self.pyaudio = None
        
        logger.info("‚úÖ –ê—É–¥–∏–æ —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    
    def get_audio_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ"""
        return {
            "sample_rate": self.sample_rate,
            "chunk_size": self.chunk_size,
            "channels": self.channels,
            "format": "PCM 16-bit",
            "is_recording": self.is_recording,
            "is_playing": self.is_playing,
            "queue_size": self.playback_queue.qsize()
        }
