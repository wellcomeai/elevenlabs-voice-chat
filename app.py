#!/usr/bin/env python3
"""
ElevenLabs Conversational AI WebSocket Server
–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import asyncio
import json
import logging
import os
import uuid
import time
from typing import Dict, Optional, Any, List
from dataclasses import dataclass, field
from enum import Enum

import aiohttp
import websockets
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# ===== CONFIGURATION =====

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(name)s | %(levelname)s | %(message)s'
)
logger = logging.getLogger(__name__)

# ElevenLabs Configuration
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY", "")
ELEVENLABS_AGENT_ID = os.getenv("ELEVENLABS_AGENT_ID", "agent_01jzwcew2ferttga9m1zcn3js1")

# URLs
ELEVENLABS_WS_URL = "wss://api.elevenlabs.io/v1/convai/conversation"
ELEVENLABS_API_BASE = "https://api.elevenlabs.io/v1"

# ===== DATA MODELS =====

class ConnectionState(Enum):
    DISCONNECTED = "disconnected"
    CONNECTING = "connecting"
    CONNECTED = "connected"
    INITIALIZED = "initialized"
    ERROR = "error"

@dataclass
class ConversationSession:
    session_id: str
    client_ws: WebSocket
    elevenlabs_ws: Optional[websockets.WebSocketClientProtocol] = None
    conversation_id: Optional[str] = None
    state: ConnectionState = ConnectionState.DISCONNECTED
    agent_id: str = ELEVENLABS_AGENT_ID
    created_at: float = field(default_factory=time.time)
    last_activity: float = field(default_factory=time.time)
    is_agent_speaking: bool = False

# ===== SESSION MANAGER =====

class ElevenLabsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π ElevenLabs"""
    
    def __init__(self):
        self.sessions: Dict[str, ConversationSession] = {}
        self.active_connections = 0
        
    async def create_session(self, client_ws: WebSocket) -> ConversationSession:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        session_id = str(uuid.uuid4())
        session = ConversationSession(
            session_id=session_id,
            client_ws=client_ws
        )
        self.sessions[session_id] = session
        self.active_connections += 1
        
        logger.info(f"üÜï –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id} (–≤—Å–µ–≥–æ: {self.active_connections})")
        return session
    
    async def get_signed_url(self, agent_id: str = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL"""
        agent_id = agent_id or ELEVENLABS_AGENT_ID
        url = f"{ELEVENLABS_API_BASE}/convai/conversation/get_signed_url"
        
        headers = {
            'xi-api-key': ELEVENLABS_API_KEY,
            'Content-Type': 'application/json'
        }
        
        params = {'agent_id': agent_id}
        
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('signed_url')
                else:
                    error_text = await response.text()
                    raise Exception(f"Signed URL failed: {response.status} - {error_text}")
    
    async def check_agent_exists(self, agent_id: str = None) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        agent_id = agent_id or ELEVENLABS_AGENT_ID
        url = f"{ELEVENLABS_API_BASE}/convai/agents/{agent_id}"
        
        headers = {'xi-api-key': ELEVENLABS_API_KEY}
        
        try:
            timeout = aiohttp.ClientTimeout(total=10)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        agent_data = await response.json()
                        return {
                            'exists': True,
                            'agent_id': agent_id,
                            'status': 'ready',
                            'data': agent_data
                        }
                    elif response.status == 404:
                        return {
                            'exists': False,
                            'agent_id': agent_id,
                            'status': 'not_found',
                            'error': 'Agent not found'
                        }
                    else:
                        error_text = await response.text()
                        return {
                            'exists': False,
                            'agent_id': agent_id,
                            'status': 'error',
                            'error': f"API error: {response.status} - {error_text}"
                        }
        except Exception as e:
            return {
                'exists': False,
                'agent_id': agent_id,
                'status': 'error',
                'error': str(e)
            }
    
    async def connect_to_elevenlabs(self, session: ConversationSession) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs WebSocket"""
        try:
            session.state = ConnectionState.CONNECTING
            await self._send_to_client(session, {
                "type": "status",
                "state": "connecting",
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs..."
            })
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å signed URL
            try:
                signed_url = await self.get_signed_url(session.agent_id)
                ws_url = signed_url
                connection_method = "signed"
                logger.info(f"‚úÖ Signed URL –ø–æ–ª—É—á–µ–Ω –¥–ª—è {session.session_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Signed URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                ws_url = f"{ELEVENLABS_WS_URL}?agent_id={session.agent_id}"
                connection_method = "direct"
                logger.info(f"üîÑ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {session.session_id}")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            extra_headers = {}
            if connection_method == "direct":
                extra_headers["xi-api-key"] = ELEVENLABS_API_KEY
            
            session.elevenlabs_ws = await websockets.connect(
                ws_url,
                extra_headers=extra_headers,
                ping_interval=20,
                ping_timeout=10,
                close_timeout=10
            )
            
            session.state = ConnectionState.CONNECTED
            logger.info(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {session.session_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            asyncio.create_task(self._handle_elevenlabs_messages(session))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            await self._send_conversation_initiation(session)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            session.state = ConnectionState.ERROR
            await self._send_to_client(session, {
                "type": "error",
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {str(e)}"
            })
            return False
    
    async def _send_conversation_initiation(self, session: ConversationSession):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            initiation_data = {
                "type": "conversation_initiation_client_data"
            }
            
            await session.elevenlabs_ws.send(json.dumps(initiation_data))
            logger.info(f"üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {session.session_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def _handle_elevenlabs_messages(self, session: ConversationSession):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ElevenLabs"""
        try:
            async for message in session.elevenlabs_ws:
                data = json.loads(message)
                await self._process_elevenlabs_message(session, data)
                session.last_activity = time.time()
                
        except websockets.exceptions.ConnectionClosed:
            logger.info(f"üîå ElevenLabs —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {session.session_id}")
            session.state = ConnectionState.DISCONNECTED
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            session.state = ConnectionState.ERROR
    
    async def _process_elevenlabs_message(self, session: ConversationSession, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ElevenLabs"""
        message_type = data.get("type", "unknown")
        
        if message_type == "conversation_initiation_metadata":
            metadata = data.get("conversation_initiation_metadata_event", {})
            session.conversation_id = metadata.get("conversation_id")
            session.state = ConnectionState.INITIALIZED
            
        elif message_type == "agent_response":
            session.is_agent_speaking = True
            
        elif message_type == "interruption":
            session.is_agent_speaking = False
            
        elif message_type == "ping":
            ping_event = data.get("ping_event", {})
            event_id = ping_event.get("event_id", "")
            
            pong_response = {
                "type": "pong",
                "event_id": event_id
            }
            await session.elevenlabs_ws.send(json.dumps(pong_response))
            return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–ª–∏–µ–Ω—Ç—É
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
        await self._send_to_client(session, data)
    
    async def send_audio_to_elevenlabs(self, session: ConversationSession, audio_data: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ ElevenLabs"""
        try:
            if session.state not in [ConnectionState.CONNECTED, ConnectionState.INITIALIZED]:
                return
                
            if not session.elevenlabs_ws:
                return
            
            audio_message = {"user_audio_chunk": audio_data}
            await session.elevenlabs_ws.send(json.dumps(audio_message))
            
            session.last_activity = time.time()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
    
    async def send_message_to_elevenlabs(self, session: ConversationSession, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ElevenLabs"""
        try:
            if session.elevenlabs_ws and session.state in [ConnectionState.CONNECTED, ConnectionState.INITIALIZED]:
                await session.elevenlabs_ws.send(json.dumps(message))
                session.last_activity = time.time()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _send_to_client(self, session: ConversationSession, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            await session.client_ws.send_json(data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: {e}")
    
    async def close_session(self, session_id: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if session_id in self.sessions:
            session = self.sessions[session_id]
            
            if session.elevenlabs_ws:
                try:
                    await session.elevenlabs_ws.close()
                except:
                    pass
            
            del self.sessions[session_id]
            self.active_connections -= 1
            logger.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {session_id}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π"""
        return {
            "total_sessions": len(self.sessions),
            "active_connections": self.active_connections,
            "sessions": [
                {
                    "session_id": s.session_id,
                    "state": s.state.value,
                    "conversation_id": s.conversation_id,
                    "uptime": time.time() - s.created_at
                }
                for s in self.sessions.values()
            ]
        }

# ===== FASTAPI APPLICATION =====

app = FastAPI(
    title="ElevenLabs Voice Chat",
    description="–ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ElevenLabs Conversational AI",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
manager = ElevenLabsManager()

# ===== HTTP ENDPOINTS =====

@app.get("/", response_class=HTMLResponse)
async def get_homepage():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        with open("index.html", "r", encoding="utf-8") as f:
            return HTMLResponse(content=f.read())
    except FileNotFoundError:
        return HTMLResponse(content="""
        <!DOCTYPE html>
        <html>
        <head><title>ElevenLabs Voice Chat</title></head>
        <body style="font-family: Arial; text-align: center; padding: 50px;">
        <h1>üö® –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
        <p>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª index.html –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ</p>
        <a href="/health">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API</a>
        </body>
        </html>
        """)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    agent_info = await manager.check_agent_exists()
    
    return {
        "status": "healthy" if agent_info['exists'] else "partial",
        "timestamp": time.time(),
        "elevenlabs_configured": bool(ELEVENLABS_API_KEY),
        "agent_configured": bool(ELEVENLABS_AGENT_ID),
        "agent_status": agent_info,
        "sessions": manager.get_stats()
    }

@app.get("/api/agent-id")
async def get_agent_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
    agent_info = await manager.check_agent_exists()
    
    return {
        "agent_id": ELEVENLABS_AGENT_ID,
        "status": "ready" if agent_info['exists'] else "error",
        "exists": agent_info['exists'],
        "timestamp": time.time()
    }

@app.get("/api/diagnostics")
async def run_diagnostics():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    tests = {}
    recommendations = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if ELEVENLABS_API_KEY:
        tests["api_key"] = "passed"
        recommendations.append("‚úÖ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        tests["api_key"] = "failed"
        recommendations.append("‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ ELEVENLABS_API_KEY")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥–µ–Ω—Ç–∞
    agent_info = await manager.check_agent_exists()
    if agent_info['exists']:
        tests["agent"] = "passed"
        recommendations.append("‚úÖ –ê–≥–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        tests["agent"] = "failed"
        recommendations.append(f"‚ùå –ê–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {agent_info['error']}")
    
    passed = sum(1 for result in tests.values() if result == "passed")
    total = len(tests)
    
    return {
        "timestamp": time.time(),
        "tests": tests,
        "overall": {
            "health_score": f"{passed}/{total}",
            "status": "healthy" if passed == total else "partial" if passed > 0 else "unhealthy"
        },
        "recommendations": recommendations,
        "sessions": manager.get_stats()
    }

# ===== WEBSOCKET ENDPOINT =====

@app.websocket("/ws/conversation")
async def websocket_conversation(websocket: WebSocket):
    """–ì–ª–∞–≤–Ω—ã–π WebSocket endpoint"""
    await websocket.accept()
    
    session = await manager.create_session(websocket)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ElevenLabs
        connected = await manager.connect_to_elevenlabs(session)
        
        if not connected:
            await websocket.close(code=1011, reason="Failed to connect to ElevenLabs")
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                message = await websocket.receive_json()
                await handle_client_message(session, message)
                
            except WebSocketDisconnect:
                logger.info(f"üëã –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {session.session_id}")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                await manager._send_to_client(session, {
                    "type": "error",
                    "message": str(e)
                })
    
    finally:
        await manager.close_session(session.session_id)

async def handle_client_message(session: ConversationSession, message: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    message_type = message.get("type", "unknown")
    
    if message_type == "user_audio_chunk":
        audio_base64 = message.get("user_audio_chunk", "")
        if audio_base64:
            await manager.send_audio_to_elevenlabs(session, audio_base64)
    
    elif message_type == "ping":
        await manager._send_to_client(session, {
            "type": "pong",
            "timestamp": time.time()
        })
    
    else:
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ElevenLabs
        await manager.send_message_to_elevenlabs(session, message)

# ===== MAIN =====

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.getenv("PORT", 8000))
    
    if not ELEVENLABS_API_KEY:
        logger.error("‚ùå ELEVENLABS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logger.info("üí° –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞: https://elevenlabs.io/")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export ELEVENLABS_API_KEY=your_key")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ ElevenLabs Voice Chat")
    logger.info(f"üîë API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if ELEVENLABS_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"ü§ñ Agent ID: {ELEVENLABS_AGENT_ID}")
    logger.info(f"üåê –°–µ—Ä–≤–µ—Ä: http://localhost:{port}")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=port,
        log_level="info"
    )

if __name__ == "__main__":
    main()
