#!/usr/bin/env python3
"""
ElevenLabs Conversational AI WebSocket Server
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ElevenLabs Conversational AI API
"""

import asyncio
import base64
import json
import logging
import os
import uuid
from typing import Dict, Optional, Any
import time
from dataclasses import dataclass
from enum import Enum

import websockets
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
import httpx

# ===== CONFIGURATION =====

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(name)s | %(levelname)s | %(message)s'
)
logger = logging.getLogger(__name__)

# ElevenLabs Configuration
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
ELEVENLABS_AGENT_ID = os.getenv("ELEVENLABS_AGENT_ID")  # –í–∞—à Agent ID

if not ELEVENLABS_API_KEY:
    logger.error("üö® ELEVENLABS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    logger.info("üí° –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞: https://elevenlabs.io/")
    raise ValueError("ElevenLabs API key is required")

if not ELEVENLABS_AGENT_ID:
    logger.warning("‚ö†Ô∏è ELEVENLABS_AGENT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç.")

# WebSocket Configuration
ELEVENLABS_WS_URL = "wss://api.elevenlabs.io/v1/convai/conversation"

# Audio Configuration
AUDIO_CONFIG = {
    "sample_rate": 16000,
    "channels": 1,
    "chunk_duration_ms": 250,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    "audio_format": "pcm_16000"
}

# ===== DATA MODELS =====

class ConnectionState(Enum):
    DISCONNECTED = "disconnected"
    CONNECTING = "connecting"
    CONNECTED = "connected"
    ERROR = "error"

@dataclass
class ConversationSession:
    session_id: str
    client_ws: WebSocket
    elevenlabs_ws: Optional[websockets.WebSocketClientProtocol] = None
    conversation_id: Optional[str] = None
    state: ConnectionState = ConnectionState.DISCONNECTED
    created_at: float = 0.0
    
    def __post_init__(self):
        self.created_at = time.time()

# ===== SESSION MANAGER =====

class ElevenLabsSessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è ElevenLabs Conversational AI"""
    
    def __init__(self):
        self.sessions: Dict[str, ConversationSession] = {}
        
    async def create_session(self, client_ws: WebSocket) -> ConversationSession:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        session_id = str(uuid.uuid4())
        session = ConversationSession(
            session_id=session_id,
            client_ws=client_ws
        )
        self.sessions[session_id] = session
        
        logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
        return session
    
    async def connect_to_elevenlabs(self, session: ConversationSession) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs WebSocket"""
        try:
            session.state = ConnectionState.CONNECTING
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if ELEVENLABS_AGENT_ID:
                ws_url = f"{ELEVENLABS_WS_URL}?agent_id={ELEVENLABS_AGENT_ID}"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å ID)
                demo_agent_id = "your_public_agent_id_here"
                ws_url = f"{ELEVENLABS_WS_URL}?agent_id={demo_agent_id}"
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs
            extra_headers = {}
            if ELEVENLABS_API_KEY:
                extra_headers["Authorization"] = f"Bearer {ELEVENLABS_API_KEY}"
            
            session.elevenlabs_ws = await websockets.connect(
                ws_url,
                extra_headers=extra_headers,
                ping_interval=20,
                ping_timeout=10,
                close_timeout=10
            )
            
            session.state = ConnectionState.CONNECTED
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ ElevenLabs: {session.session_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ElevenLabs
            asyncio.create_task(self._handle_elevenlabs_messages(session))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self._send_conversation_initiation(session)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs: {e}")
            session.state = ConnectionState.ERROR
            await self._send_to_client(session, {
                "type": "error",
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ElevenLabs: {str(e)}"
            })
            return False
    
    async def _send_conversation_initiation(self, session: ConversationSession):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        try:
            initiation_data = {
                "type": "conversation_initiation_client_data",
                "conversation_config_override": {
                    "agent": {
                        "prompt": {
                            "prompt": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                        },
                        "first_message": "–ü—Ä–∏–≤–µ—Ç! –Ø AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç ElevenLabs. –ö–∞–∫ –¥–µ–ª–∞?",
                        "language": "ru"
                    },
                    "tts": {
                        "voice_id": "21m00Tcm4TlvDq8ikWAM"  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≥–æ–ª–æ—Å
                    }
                },
                "custom_llm_extra_body": {
                    "temperature": 0.7,
                    "max_tokens": 150
                }
            }
            
            await session.elevenlabs_ws.send(json.dumps(initiation_data))
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {session.session_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def _handle_elevenlabs_messages(self, session: ConversationSession):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ElevenLabs"""
        try:
            async for message in session.elevenlabs_ws:
                data = json.loads(message)
                await self._process_elevenlabs_message(session, data)
                
        except websockets.exceptions.ConnectionClosed:
            logger.info(f"üîå ElevenLabs —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {session.session_id}")
            session.state = ConnectionState.DISCONNECTED
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ElevenLabs: {e}")
            session.state = ConnectionState.ERROR
    
    async def _process_elevenlabs_message(self, session: ConversationSession, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ElevenLabs"""
        message_type = data.get("type", "unknown")
        
        logger.debug(f"üì® ElevenLabs -> Client [{message_type}]: {session.session_id}")
        
        if message_type == "conversation_initiation_metadata":
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            metadata = data.get("conversation_initiation_metadata_event", {})
            session.conversation_id = metadata.get("conversation_id")
            
            await self._send_to_client(session, {
                "type": "conversation_ready",
                "conversation_id": session.conversation_id,
                "audio_format": metadata.get("agent_output_audio_format", "pcm_16000")
            })
            
        elif message_type == "user_transcript":
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ç–æ–≥–æ, —á—Ç–æ —Å–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            transcript_event = data.get("user_transcription_event", {})
            user_text = transcript_event.get("user_transcript", "")
            
            await self._send_to_client(session, {
                "type": "user_transcript",
                "text": user_text
            })
            
        elif message_type == "agent_response":
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
            agent_response = data.get("agent_response_event", {})
            response_text = agent_response.get("agent_response", "")
            
            await self._send_to_client(session, {
                "type": "agent_response",
                "text": response_text
            })
            
        elif message_type == "audio_response":
            # –ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
            audio_event = data.get("audio_response_event", {})
            audio_data = audio_event.get("audio_base_64", "")
            
            await self._send_to_client(session, {
                "type": "audio_response",
                "audio": audio_data,
                "audio_format": "pcm_16000"
            })
            
        elif message_type == "ping":
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping
            event_id = data.get("ping_event", {}).get("event_id", "")
            pong_response = {
                "type": "pong",
                "event_id": event_id
            }
            await session.elevenlabs_ws.send(json.dumps(pong_response))
            
        elif message_type == "vad_score":
            # Voice Activity Detection
            vad_event = data.get("vad_score_event", {})
            vad_score = vad_event.get("vad_score", 0.0)
            
            await self._send_to_client(session, {
                "type": "vad_score",
                "score": vad_score
            })
            
        elif message_type == "interruption":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–±–∏–ª –∞–≥–µ–Ω—Ç–∞
            await self._send_to_client(session, {
                "type": "interruption",
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–±–∏–ª –∞–≥–µ–Ω—Ç–∞"
            })
            
        else:
            logger.debug(f"ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ElevenLabs: {message_type}")
    
    async def send_audio_to_elevenlabs(self, session: ConversationSession, audio_data: bytes):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –≤ ElevenLabs"""
        try:
            if session.state != ConnectionState.CONNECTED or not session.elevenlabs_ws:
                logger.warning(f"‚ö†Ô∏è ElevenLabs –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω: {session.session_id}")
                return
                
            # –ö–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ base64
            audio_base64 = base64.b64encode(audio_data).decode('utf-8')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫
            audio_message = {
                "user_audio_chunk": audio_base64
            }
            
            await session.elevenlabs_ws.send(json.dumps(audio_message))
            logger.debug(f"üì§ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ElevenLabs: {len(audio_data)} –±–∞–π—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ ElevenLabs: {e}")
    
    async def _send_to_client(self, session: ConversationSession, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            await session.client_ws.send_json(data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: {e}")
    
    async def close_session(self, session_id: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if session_id in self.sessions:
            session = self.sessions[session_id]
            
            if session.elevenlabs_ws:
                await session.elevenlabs_ws.close()
            
            del self.sessions[session_id]
            logger.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {session_id}")
    
    def get_session_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π"""
        return {
            "total_sessions": len(self.sessions),
            "connected_sessions": len([s for s in self.sessions.values() if s.state == ConnectionState.CONNECTED]),
            "sessions": [
                {
                    "session_id": s.session_id,
                    "state": s.state.value,
                    "conversation_id": s.conversation_id,
                    "uptime": time.time() - s.created_at
                }
                for s in self.sessions.values()
            ]
        }

# ===== FASTAPI APPLICATION =====

app = FastAPI(
    title="ElevenLabs Conversational AI Server",
    description="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ElevenLabs Conversational AI WebSocket API",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
session_manager = ElevenLabsSessionManager()

@app.get("/", response_class=HTMLResponse)
async def get_homepage():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
    # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç–∞
    try:
        with open("index.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        # Fallback HTML –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return HTMLResponse(content="""
        <!DOCTYPE html>
        <html><head><title>ElevenLabs AI</title></head>
        <body style="font-family: Arial; text-align: center; padding: 50px;">
        <h1>üö® –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
        <p>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª index.html –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞</p>
        <p>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –≤—ã—à–µ</p>
        </body></html>
        """, status_code=200)

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "version": "1.0.0",
        "service": "ElevenLabs Conversational AI Server",
        "elevenlabs_configured": bool(ELEVENLABS_API_KEY),
        "agent_configured": bool(ELEVENLABS_AGENT_ID),
        "sessions": session_manager.get_session_stats()
    }

@app.get("/api/config")
async def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    return {
        "audio_config": AUDIO_CONFIG,
        "agent_configured": bool(ELEVENLABS_AGENT_ID),
        "features": ["real_time_conversation", "voice_activity_detection", "interruption_handling"]
    }

@app.websocket("/ws/conversation")
async def websocket_conversation_endpoint(websocket: WebSocket):
    """
    –ì–ª–∞–≤–Ω—ã–π WebSocket endpoint –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å ElevenLabs AI
    """
    await websocket.accept()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session = await session_manager.create_session(websocket)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ElevenLabs
        await session_manager.connect_to_elevenlabs(session)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        while True:
            try:
                message = await websocket.receive_json()
                await handle_client_message(session, message)
                
            except WebSocketDisconnect:
                logger.info(f"üëã –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {session.session_id}")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                await session_manager._send_to_client(session, {
                    "type": "error",
                    "message": str(e)
                })
    
    finally:
        await session_manager.close_session(session.session_id)

async def handle_client_message(session: ConversationSession, message: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    message_type = message.get("type", "unknown")
    
    logger.debug(f"üì® Client -> Server [{message_type}]: {session.session_id}")
    
    if message_type == "audio_chunk":
        # –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        audio_data = message.get("data", [])
        if audio_data:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –±–∞–π—Ç–æ–≤ –≤ bytes
            audio_bytes = bytes(audio_data)
            await session_manager.send_audio_to_elevenlabs(session, audio_bytes)
    
    elif message_type == "start_conversation":
        # –ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ)
        await session_manager._send_to_client(session, {
            "type": "conversation_started",
            "session_id": session.session_id
        })
    
    elif message_type == "end_conversation":
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        await session_manager.close_session(session.session_id)
    
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {message_type}")

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    import uvicorn
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ ElevenLabs Conversational AI Server")
    logger.info(f"üîë ElevenLabs API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if ELEVENLABS_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"ü§ñ Agent ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if ELEVENLABS_AGENT_ID else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π)'}")
    
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=port,
        log_level="info"
    )

if __name__ == "__main__":
    main()
