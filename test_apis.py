#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π
"""

import os
import asyncio
import aiohttp
import tempfile
import logging
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_elevenlabs_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs API"""
    api_key = os.getenv("ELEVENLABS_API_KEY")
    
    if not api_key or api_key == "your_elevenlabs_key":
        print("‚ùå ElevenLabs API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export ELEVENLABS_API_KEY=your_key")
        return False
    
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º ElevenLabs API...")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤
        url = "https://api.elevenlabs.io/v1/voices"
        headers = {'xi-api-key': api_key}
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    voices = await response.json()
                    print(f"‚úÖ ElevenLabs API —Ä–∞–±–æ—Ç–∞–µ—Ç. –î–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(voices.get('voices', []))}")
                elif response.status == 401:
                    print("‚ùå ElevenLabs API: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")
                    return False
                else:
                    print(f"‚ùå ElevenLabs API –æ—à–∏–±–∫–∞: {response.status}")
                    return False
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ TTS
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS...")
        tts_url = "https://api.elevenlabs.io/v1/text-to-speech/JBFqnCBsd6RMkjVDRZzb"
        
        payload = {
            "text": "–¢–µ—Å—Ç",
            "model_id": "eleven_flash_v2_5",
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.8
            }
        }
        
        headers['Content-Type'] = 'application/json'
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
            async with session.post(tts_url, json=payload, headers=headers) as response:
                if response.status == 200:
                    print("‚úÖ TTS —Ä–∞–±–æ—Ç–∞–µ—Ç")
                elif response.status == 401:
                    print("‚ùå TTS: –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π")
                    return False
                else:
                    error_text = await response.text()
                    print(f"‚ùå TTS –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                    return False
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ STT —Ñ–∞–π–ª–∞
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º STT...")
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª (—Ç–∏—à–∏–Ω–∞)
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
            # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫ + 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã
            wav_header = b'RIFF$\x00\x00\x00WAVEfmt \x10\x00\x00\x00\x01\x00\x01\x00D\xac\x00\x00\x88X\x01\x00\x02\x00\x10\x00data\x00\x00\x00\x00'
            temp_file.write(wav_header + b'\x00' * 8000)  # 1 —Å–µ–∫ —Ç–∏—à–∏–Ω—ã –ø—Ä–∏ 8kHz
            temp_file_path = temp_file.name
        
        try:
            stt_url = "https://api.elevenlabs.io/v1/speech-to-text"
            headers = {'xi-api-key': api_key}  # –£–±–∏—Ä–∞–µ–º Content-Type –¥–ª—è FormData
            
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
                with open(temp_file_path, 'rb') as audio_file:
                    audio_content = audio_file.read()
                
                data = aiohttp.FormData()
                data.add_field('audio', audio_content, filename='test.wav', content_type='audio/wav')
                data.add_field('model_id', 'eleven_multilingual_sts_v2')
                
                async with session.post(stt_url, data=data, headers=headers) as response:
                    if response.status == 200:
                        result = await response.json()
                        print("‚úÖ STT —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    elif response.status == 400:
                        print("‚ö†Ô∏è  STT: —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                    elif response.status == 401:
                        print("‚ùå STT: –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º")
                        return False
                    else:
                        error_text = await response.text()
                        print(f"‚ùå STT –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
        
        finally:
            try:
                os.unlink(temp_file_path)
            except:
                pass
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ElevenLabs: {e}")
        return False

def test_openai_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API"""
    api_key = os.getenv("OPENAI_API_KEY")
    
    if not api_key or api_key == "your_openai_key":
        print("‚ùå OpenAI API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export OPENAI_API_KEY=your_key")
        return False
    
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API...")
        
        client = OpenAI(api_key=api_key, timeout=10)
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        models = client.models.list()
        print("‚úÖ OpenAI API: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ GPT
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": "–°–∫–∞–∂–∏ '—Ç–µ—Å—Ç'"}],
            max_tokens=5,
            timeout=10
        )
        
        print("‚úÖ OpenAI GPT —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    
    elevenlabs_key = os.getenv("ELEVENLABS_API_KEY")
    openai_key = os.getenv("OPENAI_API_KEY")
    
    print(f"   ELEVENLABS_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if elevenlabs_key and elevenlabs_key != 'your_elevenlabs_key' else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   OPENAI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if openai_key and openai_key != 'your_openai_key' else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º ElevenLabs
    elevenlabs_ok = await test_elevenlabs_api()
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI
    openai_ok = test_openai_api()
    
    print("\n" + "=" * 40)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ElevenLabs API: {'‚úÖ OK' if elevenlabs_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"   OpenAI API: {'‚úÖ OK' if openai_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if elevenlabs_ok and openai_ok:
        print("\nüéâ –í—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        return True
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        print("\nüí° –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏:")
        print("   - ElevenLabs: https://elevenlabs.io/")
        print("   - OpenAI: https://platform.openai.com/")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
