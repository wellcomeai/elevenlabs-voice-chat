const express = require('express');
const path = require('path');
const https = require('https');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(express.static('.'));

// ElevenLabs configuration
const ELEVENLABS_API_KEY = process.env.ELEVENLABS_API_KEY || 'sk_95a5725ca01fdba20e15bd662d8b76152971016ff045377f';
const AGENT_ID = process.env.AGENT_ID || 'agent_01jzwcew2ferttga9m1zcn3js1';

console.log(`üéØ Server starting with Agent ID: ${AGENT_ID}`);
console.log(`üîë API Key configured: ${ELEVENLABS_API_KEY ? 'Yes' : 'No'}`);

// Enhanced logging middleware
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${req.method} ${req.path} - ${req.ip}`);
  next();
});

// ‚úÖ –û–°–ù–û–í–ù–û–ô ENDPOINT - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
app.get('/api/agent-id', async (req, res) => {
  console.log('üì° Agent ID requested');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ ElevenLabs
    const agentExists = await checkAgentExists();
    
    if (agentExists) {
      res.json({ 
        agent_id: AGENT_ID, 
        api_key: ELEVENLABS_API_KEY,
        status: 'ready',
        source: 'verified',
        message: '–ê–≥–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
        timestamp: new Date().toISOString()
      });
    } else {
      res.status(404).json({
        error: 'Agent not found',
        status: 'error',
        details: '–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ElevenLabs',
        agent_id: AGENT_ID,
        timestamp: new Date().toISOString()
      });
    }
  } catch (error) {
    console.error('‚ùå Error checking agent:', error.message);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    res.json({ 
      agent_id: AGENT_ID, 
      api_key: ELEVENLABS_API_KEY,
      status: 'ready',
      source: 'fallback',
      message: '–ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏)',
      warning: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ –≤ ElevenLabs',
      timestamp: new Date().toISOString()
    });
  }
});

// Function to check if agent exists - –ò–°–ü–†–ê–í–õ–ï–ù–û
function checkAgentExists() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.elevenlabs.io',
      port: 443,
      path: `/v1/convai/agents/${AGENT_ID}`,
      method: 'GET',
      headers: {
        'xi-api-key': ELEVENLABS_API_KEY,
        'User-Agent': 'ElevenLabs-Voice-Chat/2.0',  // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω User-Agent
        'Accept': 'application/json'
      },
      timeout: 10000 // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log(`üìä Agent check response: ${res.statusCode}`);
        
        if (res.statusCode === 200) {
          console.log('‚úÖ Agent exists and is accessible');
          resolve(true);
        } else if (res.statusCode === 404) {
          console.log('‚ùå Agent not found');
          resolve(false);
        } else if (res.statusCode === 401) {
          console.log('‚ùå Unauthorized - check API key');
          reject(new Error('Unauthorized access to agent'));
        } else {
          console.log(`‚ö†Ô∏è Unexpected status: ${res.statusCode}`);
          console.log('Response:', data);
          reject(new Error(`API returned ${res.statusCode}: ${data}`));
        }
      });
    });

    req.on('error', (error) => {
      console.log(`‚ùå Agent check failed: ${error.message}`);
      reject(error);
    });

    req.on('timeout', () => {
      console.log('‚è∞ Agent check timeout');
      req.destroy();
      reject(new Error('Request timeout'));
    });

    req.end();
  });
}

// ‚úÖ SIGNED URL ENDPOINT - –ò–°–ü–†–ê–í–õ–ï–ù –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì–ò
app.get('/api/signed-url', async (req, res) => {
  console.log('üîê Signed URL requested');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('Checking agent availability before signed URL...');
    const agentExists = await checkAgentExists();
    
    if (!agentExists) {
      console.log('‚ùå Agent not found, cannot create signed URL');
      return res.status(404).json({
        error: 'Agent not found',
        fallback_url: `wss://api.elevenlabs.io/v1/convai/conversation?agent_id=${AGENT_ID}`,
        agent_id: AGENT_ID,
        details: 'Agent does not exist or is not accessible',
        status: 'agent_not_found',
        timestamp: new Date().toISOString()
      });
    }
    
    const signedUrl = await getSignedUrl();
    console.log('‚úÖ Signed URL obtained successfully');
    
    res.json({
      signed_url: signedUrl,
      agent_id: AGENT_ID,
      status: 'ready',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Signed URL error:', error.message);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let errorDetails = error.message;
    let statusCode = 500;
    let status = 'error';
    
    if (error.message.includes('Unauthorized')) {
      statusCode = 401;
      status = 'unauthorized';
      errorDetails = 'Invalid API key or insufficient permissions';
    } else if (error.message.includes('Agent not found')) {
      statusCode = 404;
      status = 'agent_not_found';
      errorDetails = 'Agent ID not found in ElevenLabs';
    } else if (error.message.includes('Rate limit')) {
      statusCode = 429;
      status = 'rate_limited';
      errorDetails = 'API rate limit exceeded';
    } else if (error.message.includes('timeout')) {
      statusCode = 504;
      status = 'timeout';
      errorDetails = 'ElevenLabs API timeout';
    }
    
    res.status(statusCode).json({
      error: 'Signed URL failed',
      fallback_url: `wss://api.elevenlabs.io/v1/convai/conversation?agent_id=${AGENT_ID}`,
      agent_id: AGENT_ID,
      details: errorDetails,
      status: status,
      timestamp: new Date().toISOString(),
      recommendations: getErrorRecommendations(status)
    });
  }
});

// Helper function for error recommendations
function getErrorRecommendations(status) {
  switch (status) {
    case 'unauthorized':
      return [
        'Check your ElevenLabs API key',
        'Verify API key has proper permissions',
        'Check if API key is expired'
      ];
    case 'agent_not_found':
      return [
        'Verify agent ID in ElevenLabs Dashboard',
        'Check if agent is active and published',
        'Ensure agent is accessible with current API key'
      ];
    case 'rate_limited':
      return [
        'Wait before retrying',
        'Check your ElevenLabs usage limits',
        'Consider upgrading your plan'
      ];
    case 'timeout':
      return [
        'Check internet connection',
        'Retry after a few moments',
        'ElevenLabs API may be experiencing issues'
      ];
    default:
      return [
        'Try refreshing the page',
        'Check ElevenLabs service status',
        'Contact support if problem persists'
      ];
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: endpoint —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
function getSignedUrl() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.elevenlabs.io',
      port: 443,
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: get-signed-url ‚Üí get_signed_url
      path: `/v1/convai/conversation/get_signed_url?agent_id=${AGENT_ID}`,
      method: 'GET',
      headers: {
        'xi-api-key': ELEVENLABS_API_KEY,
        'User-Agent': 'ElevenLabs-Voice-Chat/2.0',  // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω User-Agent
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      timeout: 15000 // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ 15 —Å–µ–∫—É–Ω–¥
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log(`üìä Signed URL response: ${res.statusCode}`);
        console.log('Response headers:', res.headers);
        
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(data);
            console.log('Signed URL response:', response);
            if (response.signed_url) {
              resolve(response.signed_url);
            } else {
              reject(new Error('No signed_url in response'));
            }
          } catch (error) {
            console.error('Parse error:', error);
            console.error('Raw response:', data);
            reject(new Error(`Parse error: ${error.message}`));
          }
        } else if (res.statusCode === 401) {
          reject(new Error('Unauthorized - check API key'));
        } else if (res.statusCode === 404) {
          reject(new Error('Agent not found or endpoint not found'));
        } else if (res.statusCode === 429) {
          reject(new Error('Rate limit exceeded'));
        } else {
          let errorMsg = `API error: ${res.statusCode}`;
          try {
            const errorData = JSON.parse(data);
            if (errorData.detail) {
              errorMsg += ` - ${errorData.detail}`;
            } else if (errorData.error) {
              errorMsg += ` - ${errorData.error}`;
            }
          } catch (e) {
            errorMsg += ` - ${data}`;
          }
          console.error('Full error response:', data);
          reject(new Error(errorMsg));
        }
      });
    });

    req.on('error', (error) => {
      console.error('üåê Network error:', error.message);
      reject(new Error(`Network error: ${error.message}`));
    });

    req.on('timeout', () => {
      console.error('‚è∞ Request timeout');
      req.destroy();
      reject(new Error('Request timeout - ElevenLabs API not responding'));
    });

    req.end();
  });
}

// ‚úÖ HEALTH CHECK —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
app.get('/health', async (req, res) => {
  const health = {
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    version: process.version,
    agent_id: AGENT_ID,
    api_configured: !!ELEVENLABS_API_KEY
  };

  try {
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ElevenLabs API
    await checkElevenLabsAPI();
    health.elevenlabs_api = 'accessible';
    health.agent_ready = true;
  } catch (error) {
    health.elevenlabs_api = 'error';
    health.agent_ready = false;
    health.api_error = error.message;
  }

  const statusCode = health.elevenlabs_api === 'accessible' ? 200 : 503;
  res.status(statusCode).json(health);
});

// Quick API availability check
function checkElevenLabsAPI() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.elevenlabs.io',
      port: 443,
      path: '/v1/user',
      method: 'GET',
      headers: {
        'xi-api-key': ELEVENLABS_API_KEY,
        'User-Agent': 'ElevenLabs-Voice-Chat/2.0'
      },
      timeout: 5000
    };

    const req = https.request(options, (res) => {
      if (res.statusCode === 200 || res.statusCode === 401) {
        // 200 = OK, 401 = API key issue but API is accessible
        resolve();
      } else {
        reject(new Error(`API status: ${res.statusCode}`));
      }
      
      // Consume response data
      res.on('data', () => {});
    });

    req.on('error', reject);
    req.on('timeout', () => {
      req.destroy();
      reject(new Error('API timeout'));
    });

    req.end();
  });
}

// ‚úÖ RETRY AGENT ENDPOINT
app.post('/api/retry-agent', async (req, res) => {
  console.log('üîÑ Agent retry requested');
  
  try {
    const exists = await checkAgentExists();
    
    if (exists) {
      res.json({
        success: true,
        agent_id: AGENT_ID,
        status: 'ready',
        message: 'Agent is ready'
      });
    } else {
      res.status(404).json({
        success: false,
        error: 'Agent not found',
        agent_id: AGENT_ID,
        message: 'Agent does not exist in ElevenLabs'
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      agent_id: AGENT_ID,
      message: 'Failed to verify agent'
    });
  }
});

// ‚úÖ DIAGNOSTICS —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
app.get('/api/diagnostics', async (req, res) => {
  console.log('üîç Diagnostics requested');
  
  const diagnostics = {
    timestamp: new Date().toISOString(),
    server: {
      status: 'running',
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      version: process.version
    },
    configuration: {
      agent_id: AGENT_ID,
      api_key_configured: !!ELEVENLABS_API_KEY,
      api_key_preview: ELEVENLABS_API_KEY ? 
        `${ELEVENLABS_API_KEY.substring(0, 8)}...` : 'not set'
    },
    endpoints: {
      health: '/health',
      agent_id: '/api/agent-id',
      signed_url: '/api/signed-url',
      diagnostics: '/api/diagnostics'
    },
    recommendations: [],
    tests: {}
  };

  // Test 1: ElevenLabs API accessibility
  try {
    await checkElevenLabsAPI();
    diagnostics.elevenlabs = {
      status: 'accessible',
      message: 'API is responding',
      test_endpoint: '/v1/user'
    };
    diagnostics.recommendations.push('‚úÖ ElevenLabs API –¥–æ—Å—Ç—É–ø–µ–Ω');
    diagnostics.tests.api_connectivity = 'passed';
  } catch (error) {
    diagnostics.elevenlabs = {
      status: 'error',
      message: error.message,
      test_endpoint: '/v1/user'
    };
    diagnostics.recommendations.push('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å ElevenLabs API');
    diagnostics.recommendations.push('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    diagnostics.tests.api_connectivity = 'failed';
  }

  // Test 2: Agent existence and accessibility
  try {
    const agentExists = await checkAgentExists();
    if (agentExists) {
      diagnostics.agent = {
        status: 'found',
        id: AGENT_ID,
        test_endpoint: `/v1/convai/agents/${AGENT_ID}`
      };
      diagnostics.recommendations.push('‚úÖ –ê–≥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
      diagnostics.tests.agent_accessibility = 'passed';
    } else {
      diagnostics.agent = {
        status: 'not_found',
        id: AGENT_ID,
        test_endpoint: `/v1/convai/agents/${AGENT_ID}`
      };
      diagnostics.recommendations.push('‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      diagnostics.recommendations.push('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∞–≥–µ–Ω—Ç–∞ –≤ ElevenLabs Dashboard');
      diagnostics.tests.agent_accessibility = 'failed';
    }
  } catch (error) {
    diagnostics.agent = {
      status: 'error',
      error: error.message,
      id: AGENT_ID
    };
    diagnostics.recommendations.push('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞');
    diagnostics.tests.agent_accessibility = 'error';
  }

  // Test 3: Signed URL generation
  try {
    const signedUrl = await getSignedUrl();
    diagnostics.signed_url = {
      status: 'working',
      message: 'Can generate signed URLs',
      url_preview: signedUrl.substring(0, 80) + '...'
    };
    diagnostics.recommendations.push('‚úÖ Signed URL –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    diagnostics.tests.signed_url_generation = 'passed';
  } catch (error) {
    diagnostics.signed_url = {
      status: 'error',
      message: error.message
    };
    diagnostics.recommendations.push('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π Signed URL');
    diagnostics.recommendations.push('üí° –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    diagnostics.tests.signed_url_generation = 'failed';
  }

  // Overall health assessment
  const passedTests = Object.values(diagnostics.tests).filter(t => t === 'passed').length;
  const totalTests = Object.keys(diagnostics.tests).length;
  
  diagnostics.overall = {
    health_score: `${passedTests}/${totalTests}`,
    status: passedTests === totalTests ? 'healthy' : 
            passedTests > 0 ? 'partial' : 'unhealthy',
    ready_for_connection: passedTests >= 1 // –ú–∏–Ω–∏–º—É–º API –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
  };

  // Additional recommendations based on overall health
  if (diagnostics.overall.status === 'unhealthy') {
    diagnostics.recommendations.push('üö® –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    diagnostics.recommendations.push('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
  } else if (diagnostics.overall.status === 'partial') {
    diagnostics.recommendations.push('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞');
    diagnostics.recommendations.push('üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
  } else {
    diagnostics.recommendations.push('üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
  }

  res.json(diagnostics);
});

// ‚úÖ STATIC FILES
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/debug', (req, res) => {
  res.sendFile(path.join(__dirname, 'debug.html'));
});

app.get('/favicon.ico', (req, res) => {
  res.status(204).end();
});

// ‚úÖ ERROR HANDLING
app.use((err, req, res, next) => {
  console.error('‚ùå Server error:', err);
  res.status(500).json({
    error: 'Internal server error',
    message: err.message,
    timestamp: new Date().toISOString()
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({
    error: 'Not found',
    path: req.path,
    method: req.method,
    timestamp: new Date().toISOString()
  });
});

// ‚úÖ GRACEFUL SHUTDOWN
process.on('SIGTERM', () => {
  console.log('üõë SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë SIGINT received, shutting down gracefully');
  process.exit(0);
});

// ‚úÖ START SERVER
const server = app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üéØ Agent ID: ${AGENT_ID}`);
  console.log(`‚úÖ All endpoints ready!`);
  console.log(`üì± App: http://localhost:${PORT}`);
  console.log(`üîß Debug: http://localhost:${PORT}/debug`);
  console.log(`ü©∫ Health: http://localhost:${PORT}/health`);
  
  // Initial health check
  setTimeout(async () => {
    try {
      await checkElevenLabsAPI();
      console.log('‚úÖ Initial ElevenLabs API check passed');
    } catch (error) {
      console.log(`‚ö†Ô∏è Initial ElevenLabs API check failed: ${error.message}`);
    }
  }, 1000);
});

module.exports = app;
