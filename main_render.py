#!/usr/bin/env python3
"""
ElevenLabs Conversational AI - Fixed Render.com Version
–°–ª–µ–¥—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Node.js –≤–µ—Ä—Å–∏–∏ - –±–µ–∑ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket
"""

import os
import logging
import time
from typing import Optional
import aiohttp
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="ElevenLabs Voice Assistant",
    description="Python –≤–µ—Ä—Å–∏—è –±–µ–∑ WebSocket –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è",
    version="1.0-fixed"
)

# CORS –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY", "sk_95a5725ca01fdba20e15bd662d8b76152971016ff045377f")
AGENT_ID = os.getenv("AGENT_ID", "agent_01jzwcew2ferttga9m1zcn3js1")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
app_state = {
    "start_time": time.time(),
    "api_key_configured": bool(ELEVENLABS_API_KEY),
    "agent_id": AGENT_ID
}

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    logger.info(f"üîë API Key: {'Configured' if ELEVENLABS_API_KEY else 'Missing'}")
    logger.info(f"ü§ñ Agent ID: {AGENT_ID}")

@app.get("/", response_class=HTMLResponse)
async def get_homepage():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ HTML —á—Ç–æ –∏ –≤ Node.js –≤–µ—Ä—Å–∏–∏, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    return HTMLResponse(content=open("index.html", "r", encoding="utf-8").read())

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "uptime": time.time() - app_state["start_time"],
        "agent_id": AGENT_ID,
        "api_key_configured": app_state["api_key_configured"]
    }

@app.get("/api/agent-id")
async def get_agent_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞–≥–µ–Ω—Ç–∞ - –∞–Ω–∞–ª–æ–≥ Node.js –≤–µ—Ä—Å–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        agent_exists = await check_agent_exists()
        
        if agent_exists:
            return JSONResponse({
                "agent_id": AGENT_ID,
                "api_key": ELEVENLABS_API_KEY,
                "status": "ready",
                "source": "verified",
                "message": "–ê–≥–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                "timestamp": time.time()
            })
        else:
            return JSONResponse(
                status_code=404,
                content={
                    "error": "Agent not found",
                    "status": "error",
                    "agent_id": AGENT_ID
                }
            )
    except Exception as e:
        logger.error(f"Error checking agent: {e}")
        # Fallback response
        return JSONResponse({
            "agent_id": AGENT_ID,
            "api_key": ELEVENLABS_API_KEY,
            "status": "ready",
            "source": "fallback",
            "warning": "Could not verify agent status"
        })

@app.get("/api/signed-url")
async def get_signed_url():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ signed URL –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs"""
    try:
        signed_url = await fetch_signed_url()
        
        return JSONResponse({
            "signed_url": signed_url,
            "agent_id": AGENT_ID,
            "status": "ready",
            "timestamp": time.time()
        })
        
    except Exception as e:
        logger.error(f"Failed to get signed URL: {e}")
        
        # Fallback to direct URL
        fallback_url = f"wss://api.elevenlabs.io/v1/convai/conversation?agent_id={AGENT_ID}"
        
        return JSONResponse(
            status_code=500,
            content={
                "error": "Signed URL failed",
                "fallback_url": fallback_url,
                "agent_id": AGENT_ID,
                "details": str(e)
            }
        )

async def check_agent_exists() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    try:
        headers = {
            "xi-api-key": ELEVENLABS_API_KEY,
            "User-Agent": "ElevenLabs-Voice-Chat/1.0"
        }
        
        url = f"https://api.elevenlabs.io/v1/convai/agents/{AGENT_ID}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=10) as response:
                if response.status == 200:
                    logger.info("‚úÖ Agent exists")
                    return True
                elif response.status == 404:
                    logger.warning("‚ùå Agent not found")
                    return False
                else:
                    logger.warning(f"Unexpected status: {response.status}")
                    return False
                    
    except Exception as e:
        logger.error(f"Error checking agent: {e}")
        raise

async def fetch_signed_url() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ signed URL –æ—Ç ElevenLabs"""
    try:
        headers = {
            "xi-api-key": ELEVENLABS_API_KEY,
            "Content-Type": "application/json"
        }
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
        url = f"https://api.elevenlabs.io/v1/convai/conversation/get_signed_url?agent_id={AGENT_ID}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=15) as response:
                if response.status == 200:
                    data = await response.json()
                    signed_url = data.get("signed_url")
                    if signed_url:
                        logger.info("‚úÖ Signed URL obtained")
                        return signed_url
                    else:
                        raise Exception("No signed_url in response")
                else:
                    text = await response.text()
                    raise Exception(f"API error {response.status}: {text}")
                    
    except Exception as e:
        logger.error(f"Failed to get signed URL: {e}")
        raise

@app.post("/api/retry-agent")
async def retry_agent():
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
    try:
        exists = await check_agent_exists()
        
        return JSONResponse({
            "success": exists,
            "agent_id": AGENT_ID,
            "status": "ready" if exists else "not_found"
        })
        
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "error": str(e),
                "agent_id": AGENT_ID
            }
        )

@app.get("/api/diagnostics")
async def diagnostics():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    diagnostics_data = {
        "timestamp": time.time(),
        "server": {
            "status": "running",
            "uptime": time.time() - app_state["start_time"]
        },
        "configuration": {
            "agent_id": AGENT_ID,
            "api_key_configured": app_state["api_key_configured"]
        }
    }
    
    # –¢–µ—Å—Ç—ã
    tests = {}
    
    # –¢–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        await check_agent_exists()
        tests["api_connectivity"] = "passed"
    except:
        tests["api_connectivity"] = "failed"
    
    # –¢–µ—Å—Ç signed URL
    try:
        await fetch_signed_url()
        tests["signed_url_generation"] = "passed"
    except:
        tests["signed_url_generation"] = "failed"
    
    diagnostics_data["tests"] = tests
    
    return JSONResponse(diagnostics_data)

if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    uvicorn.run(app, host="0.0.0.0", port=port)
