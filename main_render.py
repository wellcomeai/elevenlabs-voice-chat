#!/usr/bin/env python3
"""
ElevenLabs Conversational AI - Render.com Version —Å –ø—Ä—è–º—ã–º WebSocket
"""

import asyncio
import logging
import os
import sys
import time
import json
import base64
from pathlib import Path
from typing import Dict, Any, List, Optional

# FastAPI –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ WebSocket
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import uvicorn

# –î–ª—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞ –∫ ElevenLabs
import aiohttp

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

from config import Config
from utils import setup_logging, print_banner

logger = logging.getLogger(__name__)

# ===== FastAPI Application =====

app = FastAPI(
    title="ElevenLabs Voice Assistant",
    description="–û–±–ª–∞—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ElevenLabs —Å –ø—Ä—è–º—ã–º WebSocket",
    version="3.0-render-direct"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ===== Global State =====

class AppState:
    def __init__(self):
        self.config = None
        self.is_initialized = False
        self.start_time = time.time()
        self.stats = {
            "messages_received": 0,
            "connections": 0,
            "errors": 0,
            "audio_chunks_sent": 0,
            "audio_chunks_received": 0,
            "ws_connections": 0
        }
        # –ê–∫—Ç–∏–≤–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.active_connections: List[WebSocket] = []
        # –ü—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ ElevenLabs
        self.elevenlabs_connections: Dict[str, aiohttp.ClientWebSocketResponse] = {}

app_state = AppState()

# ===== Startup/Shutdown =====

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ ElevenLabs —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä—è–º—ã–º WebSocket...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        app_state.config = Config()
        if not app_state.config.validate():
            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            return
        
        app_state.is_initialized = True
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        app_state.is_initialized = False

@app.on_event("shutdown") 
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for connection in app_state.active_connections:
        try:
            await connection.close()
        except:
            pass
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ElevenLabs
    for connection_id, ws in app_state.elevenlabs_connections.items():
        try:
            await ws.close()
        except:
            pass
    
    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# ===== HTTP Endpoints =====

@app.get("/", response_class=HTMLResponse)
async def get_homepage():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∞—É–¥–∏–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    return HTMLResponse(content="""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ElevenLabs Conversational AI</title>
    <style>
        body {
            font-family: 'Inter', -apple-system, sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #333;
        }
        
        .container {
            max-width: 700px;
            width: 90%;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            margin: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .title {
            font-size: 2.2rem;
            margin-bottom: 5px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 700;
        }
        
        .subtitle {
            color: #666;
            font-size: 1rem;
        }
        
        .status-badge {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 50px;
            font-weight: 600;
            font-size: 0.9rem;
            margin: 15px 0;
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .status-badge.disconnected {
            background: linear-gradient(to right, #ff6b6b, #ee5253);
            color: white;
        }
        
        .status-badge.connecting {
            background: linear-gradient(to right, #f7b731, #f7971e);
            color: white;
            animation: pulse 1.5s infinite;
        }
        
        .status-badge.connected {
            background: linear-gradient(to right, #2ecc71, #1abc9c);
            color: white;
        }
        
        .status-badge.speaking {
            background: linear-gradient(to right, #00cec9, #0984e3);
            color: white;
            animation: speaking-pulse 1.5s infinite;
        }
        
        .status-badge.listening {
            background: linear-gradient(to right, #6c5ce7, #74b9ff);
            color: white;
            animation: listening-pulse 2s infinite;
        }
        
        .status-badge.thinking {
            background: linear-gradient(to right, #a29bfe, #74b9ff);
            color: white;
            animation: thinking-pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 0.8; }
            50% { opacity: 1; }
        }
        
        @keyframes speaking-pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.03); }
        }
        
        @keyframes listening-pulse {
            0%, 100% { transform: scale(1); opacity: 0.9; }
            50% { transform: scale(1.05); opacity: 1; }
        }
        
        @keyframes thinking-pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }
        
        .microphone-btn {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            font-size: 3rem;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 30px auto;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
        }
        
        .microphone-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }
        
        .microphone-btn.listening {
            background: linear-gradient(135deg, #6c5ce7, #74b9ff);
            animation: mic-pulse 1.5s infinite;
        }
        
        .microphone-btn.speaking {
            background: linear-gradient(135deg, #00cec9, #0984e3);
            animation: mic-wave 1s infinite;
        }
        
        .microphone-btn.thinking {
            background: linear-gradient(135deg, #a29bfe, #74b9ff);
            animation: mic-thinking 1.5s infinite;
        }
        
        @keyframes mic-pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.08); }
        }
        
        @keyframes mic-wave {
            0%, 100% { transform: scale(1); }
            25% { transform: scale(1.03); }
            75% { transform: scale(0.97); }
        }
        
        @keyframes mic-thinking {
            0%, 100% { box-shadow: 0 0 0 rgba(108, 92, 231, 0.4); }
            50% { box-shadow: 0 0 30px rgba(108, 92, 231, 0.6); }
        }
        
        .volume-meter {
            height: 6px;
            background: #eee;
            border-radius: 3px;
            overflow: hidden;
            margin: 20px auto;
            max-width: 400px;
        }
        
        .volume-level {
            height: 100%;
            width: 0%;
            background: linear-gradient(to right, #667eea, #764ba2);
            border-radius: 3px;
            transition: width 0.1s ease;
        }
        
        .conversation {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            max-height: 300px;
            overflow-y: auto;
            margin: 30px 0;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 12px 16px;
            border-radius: 12px;
            max-width: 80%;
            line-height: 1.4;
        }
        
        .message.user {
            background: #e3f2fd;
            margin-left: auto;
            text-align: right;
            color: #0a58ca;
        }
        
        .message.assistant {
            background: #e9e5fd;
            color: #5d48c9;
            border-left: 3px solid #6c5ce7;
        }
        
        .message.system {
            background: #fff3cd;
            color: #856404;
            text-align: center;
            font-style: italic;
            margin: 10px auto;
            max-width: 90%;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin: 20px 0;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 10px 20px;
            border-radius: 50px;
            border: none;
            background: #f0f0f0;
            color: #333;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            background: #e0e0e0;
            transform: translateY(-2px);
        }
        
        .btn.primary {
            background: linear-gradient(to right, #667eea, #764ba2);
            color: white;
        }
        
        .btn.primary:hover {
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .settings {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
        
        .settings h3 {
            color: #666;
            font-size: 1rem;
            margin-bottom: 15px;
        }
        
        .setting-group {
            margin-bottom: 15px;
        }
        
        .setting-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .setting-label {
            font-size: 0.9rem;
            color: #666;
        }
        
        select, input {
            padding: 8px 12px;
            border-radius: 8px;
            border: 1px solid #ddd;
            background: #f9f9f9;
            font-size: 0.9rem;
        }
        
        .footer {
            text-align: center;
            margin-top: 30px;
            color: #666;
            font-size: 0.9rem;
        }
        
        .debug-info {
            margin-top: 20px;
            font-size: 0.8rem;
            color: #666;
            text-align: left;
            max-height: 100px;
            overflow-y: auto;
            background: #f9f9f9;
            padding: 10px;
            border-radius: 8px;
            display: none;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }
            
            .title {
                font-size: 1.8rem;
            }
            
            .microphone-btn {
                width: 100px;
                height: 100px;
                font-size: 2.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">ElevenLabs Voice Assistant</h1>
            <p class="subtitle">–†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ —Å –ò–ò —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π WebSocket</p>
            <div class="status-badge disconnected" id="statusBadge">–û—Ç–∫–ª—é—á–µ–Ω–æ</div>
        </div>
        
        <button class="microphone-btn" id="micButton">üé§</button>
        
        <div class="volume-meter">
            <div class="volume-level" id="volumeLevel"></div>
        </div>
        
        <div class="controls">
            <button class="btn primary" id="connectBtn">üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</button>
            <button class="btn" id="disconnectBtn" disabled>‚õî –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è</button>
            <button class="btn" id="debugBtn">üîß –û—Ç–ª–∞–¥–∫–∞</button>
        </div>
        
        <div class="conversation" id="conversation">
            <div class="message system">
                –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
            </div>
        </div>
        
        <div class="settings">
            <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ –∏ –º–æ–¥–µ–ª–∏</h3>
            <div class="setting-group">
                <div class="setting-row">
                    <span class="setting-label">–ì–æ–ª–æ—Å:</span>
                    <select id="voiceSelect">
                        <option value="21m00Tcm4TlvDq8ikWAM">Rachel (–∂–µ–Ω—Å–∫–∏–π)</option>
                        <option value="pNInz6obpgDQGcFmaJgB">Adam (–º—É–∂—Å–∫–æ–π)</option>
                        <option value="D38z5RcWu1voky8WS1ja">Domi (–∂–µ–Ω—Å–∫–∏–π)</option>
                        <option value="jsCqWAovK2LkecY7zXl4">Dave (–º—É–∂—Å–∫–æ–π)</option>
                        <option value="XB0fDUnXU5powFXDhCwa">Dorothy (–∂–µ–Ω—Å–∫–∏–π)</option>
                    </select>
                </div>
                <div class="setting-row">
                    <span class="setting-label">–ú–æ–¥–µ–ª—å:</span>
                    <select id="modelSelect">
                        <option value="eleven_turbo_v2">Eleven Turbo v2 (–±—ã—Å—Ç—Ä–∞—è)</option>
                        <option value="eleven_multilingual_v2">Multilingual v2 (–º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è)</option>
                    </select>
                </div>
                <div class="setting-row">
                    <span class="setting-label">Stability:</span>
                    <input type="range" id="stabilitySlider" min="0" max="1" step="0.1" value="0.5">
                </div>
                <div class="setting-row">
                    <span class="setting-label">Similarity:</span>
                    <input type="range" id="similaritySlider" min="0" max="1" step="0.1" value="0.8">
                </div>
            </div>
        </div>
        
        <div class="debug-info" id="debugInfo"></div>
        
        <div class="footer">
            <p>Powered by ElevenLabs Conversational AI ‚Ä¢ <span id="apiKeyStatus">API Key: –ø—Ä–æ–≤–µ—Ä–∫–∞...</span></p>
        </div>
    </div>

    <script>
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ElevenLabs Conversational AI
        class ElevenLabsConversationalAI {
            constructor() {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                this.ws = null;
                this.audioContext = null;
                this.mediaRecorder = null;
                this.audioStream = null;
                this.isConnected = false;
                this.isRecording = false;
                this.assistantState = 'idle';
                this.audioChunks = [];
                this.debugMode = false;
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                this.initializeUI();
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
                this.setupEventListeners();
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
                this.checkAPIKey();
                
                this.log('ElevenLabsConversationalAI initialized');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            initializeUI() {
                this.micButton = document.getElementById('micButton');
                this.connectBtn = document.getElementById('connectBtn');
                this.disconnectBtn = document.getElementById('disconnectBtn');
                this.debugBtn = document.getElementById('debugBtn');
                this.statusBadge = document.getElementById('statusBadge');
                this.volumeLevel = document.getElementById('volumeLevel');
                this.conversation = document.getElementById('conversation');
                this.debugInfo = document.getElementById('debugInfo');
                this.apiKeyStatus = document.getElementById('apiKeyStatus');
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
                this.voiceSelect = document.getElementById('voiceSelect');
                this.modelSelect = document.getElementById('modelSelect');
                this.stabilitySlider = document.getElementById('stabilitySlider');
                this.similaritySlider = document.getElementById('similaritySlider');
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            setupEventListeners() {
                // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                this.connectBtn.addEventListener('click', () => {
                    this.connect();
                });
                
                // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                this.disconnectBtn.addEventListener('click', () => {
                    this.disconnect();
                });
                
                // –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                this.micButton.addEventListener('click', () => {
                    if (this.isConnected) {
                        if (this.isRecording) {
                            this.stopRecording();
                        } else {
                            this.startRecording();
                        }
                    } else {
                        this.showMessage('system', '–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É');
                    }
                });
                
                // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ª–∞–¥–∫–∏
                this.debugBtn.addEventListener('click', () => {
                    this.debugMode = !this.debugMode;
                    this.debugInfo.style.display = this.debugMode ? 'block' : 'none';
                    this.debugBtn.textContent = this.debugMode ? 'üîß –°–∫—Ä—ã—Ç—å –æ—Ç–ª–∞–¥–∫—É' : 'üîß –û—Ç–ª–∞–¥–∫–∞';
                });
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à (–ø—Ä–æ–±–µ–ª –¥–ª—è –∑–∞–ø–∏—Å–∏)
                document.addEventListener('keydown', (e) => {
                    if (e.code === 'Space' && this.isConnected && !this.isRecording && 
                        this.assistantState !== 'speaking' && this.assistantState !== 'thinking') {
                        e.preventDefault();
                        this.startRecording();
                    }
                });
                
                document.addEventListener('keyup', (e) => {
                    if (e.code === 'Space' && this.isConnected && this.isRecording) {
                        e.preventDefault();
                        this.stopRecording();
                    }
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
            async checkAPIKey() {
                try {
                    const response = await fetch('/api/config');
                    if (response.ok) {
                        const data = await response.json();
                        if (data.api_key_configured) {
                            this.apiKeyStatus.textContent = 'API Key: –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                            this.apiKeyStatus.style.color = '#2ecc71';
                        } else {
                            this.apiKeyStatus.textContent = 'API Key: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                            this.apiKeyStatus.style.color = '#e74c3c';
                            this.showMessage('system', '‚ö†Ô∏è API Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                        }
                    }
                } catch (error) {
                    this.log('Error checking API key:', error);
                    this.apiKeyStatus.textContent = 'API Key: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏';
                    this.apiKeyStatus.style.color = '#e74c3c';
                }
            }
            
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
            async connect() {
                if (this.isConnected) return;
                
                try {
                    this.updateStatus('connecting', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                    this.log('Connecting to server...');
                    
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
                    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                    const wsUrl = `${protocol}//${window.location.host}/ws/voice`;
                    
                    this.ws = new WebSocket(wsUrl);
                    
                    this.ws.onopen = this.handleWebSocketOpen.bind(this);
                    this.ws.onmessage = this.handleWebSocketMessage.bind(this);
                    this.ws.onclose = this.handleWebSocketClose.bind(this);
                    this.ws.onerror = this.handleWebSocketError.bind(this);
                    
                } catch (error) {
                    this.log('Connection error:', error);
                    this.updateStatus('disconnected', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
                    this.showMessage('system', `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è WebSocket
            handleWebSocketOpen() {
                this.log('WebSocket connected');
                this.isConnected = true;
                this.updateStatus('connected', '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ');
                this.showMessage('system', '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                this.sendVoiceConfiguration();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                this.connectBtn.disabled = true;
                this.disconnectBtn.disabled = false;
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞
            sendVoiceConfiguration() {
                if (!this.ws || this.ws.readyState !== WebSocket.OPEN) return;
                
                const config = {
                    type: 'configuration',
                    voice_id: this.voiceSelect.value,
                    model_id: this.modelSelect.value,
                    enable_maas: true,
                    voice_settings: {
                        stability: parseFloat(this.stabilitySlider.value),
                        similarity_boost: parseFloat(this.similaritySlider.value)
                    }
                };
                
                this.ws.send(JSON.stringify(config));
                this.log('Sent voice configuration:', config);
                
                this.showMessage('system', 'üéµ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket
            handleWebSocketMessage(event) {
                try {
                    const data = JSON.parse(event.data);
                    this.log('Received message:', data);
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    if (data.state) {
                        this.handleStateChange(data.state);
                    }
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    if (data.input_text) {
                        this.showMessage('user', data.input_text);
                    }
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                    if (data.text) {
                        this.showMessage('assistant', data.text);
                    }
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
                    if (data.audio) {
                        this.playAudio(data.audio);
                    }
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                    if (data.error) {
                        this.showMessage('system', `‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
                    }
                    
                } catch (error) {
                    this.log('Error parsing message:', error);
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            handleStateChange(state) {
                this.assistantState = state;
                
                switch (state) {
                    case 'listening':
                        this.updateStatus('listening', 'üéß –°–ª—É—à–∞—é...');
                        this.micButton.classList.remove('speaking', 'thinking');
                        this.micButton.classList.add('listening');
                        break;
                        
                    case 'thinking':
                        this.updateStatus('thinking', 'ü§î –î—É–º–∞—é...');
                        this.micButton.classList.remove('listening', 'speaking');
                        this.micButton.classList.add('thinking');
                        break;
                        
                    case 'speaking':
                        this.updateStatus('speaking', 'üó£Ô∏è –ì–æ–≤–æ—Ä—é...');
                        this.micButton.classList.remove('listening', 'thinking');
                        this.micButton.classList.add('speaking');
                        break;
                        
                    default:
                        this.updateStatus('connected', '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ');
                        this.micButton.classList.remove('listening', 'thinking', 'speaking');
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket
            handleWebSocketClose(event) {
                this.log(`WebSocket closed: ${event.code} ${event.reason}`);
                
                this.isConnected = false;
                this.updateStatus('disconnected', '–û—Ç–∫–ª—é—á–µ–Ω–æ');
                
                if (this.isRecording) {
                    this.stopRecording();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                this.connectBtn.disabled = false;
                this.disconnectBtn.disabled = true;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (event.code !== 1000) {
                    this.showMessage('system', `‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: ${event.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'}`);
                } else {
                    this.showMessage('system', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket
            handleWebSocketError(error) {
                this.log('WebSocket error:', error);
                this.showMessage('system', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            }
            
            // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            disconnect() {
                if (!this.isConnected) return;
                
                this.log('Disconnecting...');
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –æ–Ω–∞ –∏–¥–µ—Ç
                if (this.isRecording) {
                    this.stopRecording();
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
                if (this.ws) {
                    this.ws.close(1000, '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ');
                }
                
                this.isConnected = false;
                this.updateStatus('disconnected', '–û—Ç–∫–ª—é—á–µ–Ω–æ');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                this.connectBtn.disabled = false;
                this.disconnectBtn.disabled = true;
            }
            
            // –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
            async startRecording() {
                if (!this.isConnected || this.isRecording || 
                    this.assistantState === 'speaking' || this.assistantState === 'thinking') return;
                
                try {
                    this.log('Starting recording...');
                    
                    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
                    this.audioStream = await navigator.mediaDevices.getUserMedia({
                        audio: {
                            echoCancellation: true,
                            noiseSuppression: true,
                            autoGainControl: true,
                            sampleRate: 16000
                        }
                    });
                    
                    // –°–æ–∑–¥–∞–µ–º AudioContext –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)({
                        sampleRate: 16000
                    });
                    
                    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                    this.setupVolumeAnalyzer();
                    
                    // –°–æ–∑–¥–∞–µ–º MediaRecorder
                    this.mediaRecorder = new MediaRecorder(this.audioStream);
                    this.audioChunks = [];
                    
                    this.mediaRecorder.ondataavailable = (event) => {
                        if (event.data.size > 0) {
                            this.audioChunks.push(event.data);
                            this.processAudioChunk(event.data);
                        }
                    };
                    
                    this.mediaRecorder.start(250); // –ó–∞–ø–∏—Å—å –ø–æ 250–º—Å
                    this.isRecording = true;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    this.micButton.classList.add('listening');
                    this.updateStatus('listening', 'üéß –ì–æ–≤–æ—Ä–∏—Ç–µ...');
                    
                } catch (error) {
                    this.log('Recording error:', error);
                    this.showMessage('system', `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ${error.message}`);
                }
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            setupVolumeAnalyzer() {
                if (!this.audioContext || !this.audioStream) return;
                
                const source = this.audioContext.createMediaStreamSource(this.audioStream);
                const analyzer = this.audioContext.createAnalyser();
                
                analyzer.fftSize = 256;
                analyzer.smoothingTimeConstant = 0.8;
                
                source.connect(analyzer);
                
                const bufferLength = analyzer.frequencyBinCount;
                const dataArray = new Uint8Array(bufferLength);
                
                const updateVolume = () => {
                    if (!this.isRecording) return;
                    
                    analyzer.getByteFrequencyData(dataArray);
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                    let sum = 0;
                    for (let i = 0; i < bufferLength; i++) {
                        sum += dataArray[i];
                    }
                    
                    const average = sum / bufferLength;
                    const volume = Math.min(100, Math.max(0, average * 1.5));
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                    this.volumeLevel.style.width = `${volume}%`;
                    
                    // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                    if (volume > 70) {
                        this.volumeLevel.style.background = 'linear-gradient(to right, #ff4757, #ff6b81)';
                    } else if (volume > 30) {
                        this.volumeLevel.style.background = 'linear-gradient(to right, #1e90ff, #70a1ff)';
                    } else {
                        this.volumeLevel.style.background = 'linear-gradient(to right, #667eea, #764ba2)';
                    }
                    
                    requestAnimationFrame(updateVolume);
                };
                
                updateVolume();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
                this.audioSource = source;
                this.audioAnalyzer = analyzer;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞
            async processAudioChunk(chunk) {
                if (!this.ws || this.ws.readyState !== WebSocket.OPEN) return;
                
                try {
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º blob –≤ arrayBuffer
                    const arrayBuffer = await chunk.arrayBuffer();
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                    const base64Audio = this.arrayBufferToBase64(arrayBuffer);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    this.ws.send(JSON.stringify({
                        audio: base64Audio
                    }));
                    
                } catch (error) {
                    this.log('Error processing audio chunk:', error);
                }
            }
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
            stopRecording() {
                if (!this.isRecording) return;
                
                this.log('Stopping recording...');
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MediaRecorder
                if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {
                    this.mediaRecorder.stop();
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
                if (this.audioStream) {
                    this.audioStream.getTracks().forEach(track => track.stop());
                }
                
                // –û—á–∏—â–∞–µ–º AudioContext
                if (this.audioContext) {
                    if (this.audioSource) {
                        this.audioSource.disconnect();
                    }
                    
                    this.audioContext.close();
                }
                
                this.isRecording = false;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                this.micButton.classList.remove('listening');
                this.volumeLevel.style.width = '0%';
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–µ—Ü —Ä–µ—á–∏
                if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                    this.ws.send(JSON.stringify({}));
                    this.log('Sent end-of-speech signal');
                }
                
                this.updateStatus('connected', '–û–±—Ä–∞–±–æ—Ç–∫–∞...');
            }
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ
            playAudio(base64Audio) {
                try {
                    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
                    const binaryString = atob(base64Audio);
                    const bytes = new Uint8Array(binaryString.length);
                    
                    for (let i = 0; i < binaryString.length; i++) {
                        bytes[i] = binaryString.charCodeAt(i);
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º AudioContext –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if (!this.playbackContext) {
                        this.playbackContext = new (window.AudioContext || window.webkitAudioContext)();
                    }
                    
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PCM –≤ WAV
                    const wavData = this.createWavFromPcm(bytes, 16000, 1);
                    
                    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                    this.playbackContext.decodeAudioData(wavData, (buffer) => {
                        const source = this.playbackContext.createBufferSource();
                        source.buffer = buffer;
                        source.connect(this.playbackContext.destination);
                        source.start(0);
                    });
                    
                } catch (error) {
                    this.log('Error playing audio:', error);
                }
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ WAV –∏–∑ PCM
            createWavFromPcm(pcmData, sampleRate, numChannels) {
                const bitsPerSample = 16;
                const bytesPerSample = bitsPerSample / 8;
                const blockAlign = numChannels * bytesPerSample;
                const byteRate = sampleRate * blockAlign;
                const dataSize = pcmData.length;
                
                const buffer = new ArrayBuffer(44 + dataSize);
                const view = new DataView(buffer);
                
                // RIFF chunk descriptor
                this.writeString(view, 0, 'RIFF');
                view.setUint32(4, 36 + dataSize, true);
                this.writeString(view, 8, 'WAVE');
                
                // fmt sub-chunk
                this.writeString(view, 12, 'fmt ');
                view.setUint32(16, 16, true);
                view.setUint16(20, 1, true);
                view.setUint16(22, numChannels, true);
                view.setUint32(24, sampleRate, true);
                view.setUint32(28, byteRate, true);
                view.setUint16(32, blockAlign, true);
                view.setUint16(34, bitsPerSample, true);
                
                // data sub-chunk
                this.writeString(view, 36, 'data');
                view.setUint32(40, dataSize, true);
                
                // Write PCM data
                for (let i = 0; i < dataSize; i++) {
                    view.setUint8(44 + i, pcmData[i]);
                }
                
                return buffer;
            }
            
            // –ó–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –≤ DataView
            writeString(view, offset, string) {
                for (let i = 0; i < string.length; i++) {
                    view.setUint8(offset + i, string.charCodeAt(i));
                }
            }
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ArrayBuffer –≤ base64
            arrayBufferToBase64(buffer) {
                const bytes = new Uint8Array(buffer);
                let binary = '';
                
                for (let i = 0; i < bytes.byteLength; i++) {
                    binary += String.fromCharCode(bytes[i]);
                }
                
                return btoa(binary);
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            updateStatus(state, text) {
                this.statusBadge.className = `status-badge ${state}`;
                this.statusBadge.textContent = text;
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
            showMessage(type, text) {
                const messageEl = document.createElement('div');
                messageEl.className = `message ${type}`;
                messageEl.textContent = text;
                
                this.conversation.appendChild(messageEl);
                this.conversation.scrollTop = this.conversation.scrollHeight;
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log(...args) {
                console.log('[ElevenLabsAI]', ...args);
                
                if (this.debugMode) {
                    const message = args.map(arg => 
                        typeof arg === 'object' ? JSON.stringify(arg) : arg
                    ).join(' ');
                    
                    const logEntry = document.createElement('div');
                    logEntry.textContent = `${new Date().toLocaleTimeString()}: ${message}`;
                    
                    this.debugInfo.appendChild(logEntry);
                    this.debugInfo.scrollTop = this.debugInfo.scrollHeight;
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                    if (this.debugInfo.children.length > 50) {
                        this.debugInfo.removeChild(this.debugInfo.children[0]);
                    }
                }
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', () => {
            window.elevenlabsAI = new ElevenLabsConversationalAI();
        });
    </script>
</body>
</html>
    """)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    if not app_state.is_initialized:
        raise HTTPException(status_code=503, detail="Service not initialized")
    
    return {
        "status": "healthy",
        "service": "ElevenLabs Voice Assistant",
        "version": "3.0-render-direct",
        "timestamp": time.time(),
        "uptime": time.time() - app_state.start_time,
        "config": {
            "elevenlabs_configured": bool(app_state.config.ELEVENLABS_API_KEY),
            "agent_id": app_state.config.ELEVENLABS_AGENT_ID
        }
    }

@app.get("/api/config")
async def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if not app_state.is_initialized:
        raise HTTPException(status_code=503, detail="Service not initialized")
    
    return {
        "agent_id": app_state.config.ELEVENLABS_AGENT_ID,
        "api_key_configured": bool(app_state.config.ELEVENLABS_API_KEY),
        "audio_format": "PCM 16kHz",
        "features": {
            "websocket_api": True,
            "rest_api": True,
            "audio_interface": True,
            "cloud_deployment": True
        }
    }

@app.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    uptime = time.time() - app_state.start_time
    
    stats = {
        "uptime": uptime,
        "uptime_formatted": f"{uptime:.1f}s",
        "initialized": app_state.is_initialized,
        "messages_received": app_state.stats["messages_received"],
        "connections": app_state.stats["connections"],
        "errors": app_state.stats["errors"],
        "audio_chunks_sent": app_state.stats["audio_chunks_sent"],
        "audio_chunks_received": app_state.stats["audio_chunks_received"],
        "active_connections": len(app_state.active_connections)
    }
    
    return stats

# ===== WebSocket Endpoints =====

@app.websocket("/ws/voice")
async def websocket_voice(websocket: WebSocket):
    """WebSocket –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ –ø—Ä—è–º–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É"""
    await websocket.accept()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    app_state.active_connections.append(websocket)
    app_state.stats["connections"] += 1
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connection_id = f"voice_{time.time()}_{id(websocket)}"
    elevenlabs_ws = None
    
    try:
        logger.info(f"üé§ –ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {connection_id}")
        
        # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        try:
            init_message = await asyncio.wait_for(websocket.receive_text(), timeout=30.0)
            config = json.loads(init_message)
            
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {config}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ElevenLabs Conversational API
            try:
                # URL –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ElevenLabs
                ws_url = "wss://api.elevenlabs.io/v1/conversational"
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
                async with aiohttp.ClientSession() as session:
                    # –ó–∞–º–µ–Ω—è–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π
                    if "xi_api_key" in config:
                        config["xi_api_key"] = app_state.config.ELEVENLABS_API_KEY
                    elif "type" in config and config["type"] == "configuration":
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                        config = {
                            "xi_api_key": app_state.config.ELEVENLABS_API_KEY,
                            "voice_id": config.get("voice_id", "21m00Tcm4TlvDq8ikWAM"),
                            "model_id": config.get("model_id", "eleven_turbo_v2"),
                            "enable_maas": True,
                            "voice_settings": config.get("voice_settings", {
                                "stability": 0.5,
                                "similarity_boost": 0.8
                            })
                        }
                    
                    logger.info(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs Conversational API...")
                    
                    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ElevenLabs
                    async with session.ws_connect(ws_url) as elevenlabs_ws:
                        app_state.elevenlabs_connections[connection_id] = elevenlabs_ws
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await elevenlabs_ws.send_str(json.dumps(config))
                        logger.info(f"üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        
                        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                        client_to_elevenlabs = asyncio.create_task(
                            forward_websocket_messages(websocket, elevenlabs_ws, connection_id, "client_to_elevenlabs")
                        )
                        
                        elevenlabs_to_client = asyncio.create_task(
                            forward_websocket_messages(elevenlabs_ws, websocket, connection_id, "elevenlabs_to_client")
                        )
                        
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
                        done, pending = await asyncio.wait(
                            [client_to_elevenlabs, elevenlabs_to_client],
                            return_when=asyncio.FIRST_COMPLETED
                        )
                        
                        # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
                        for task in pending:
                            task.cancel()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                        for task in done:
                            try:
                                task.result()
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs: {e}")
                await websocket.send_json({
                    "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs: {str(e)}"
                })
                
        except asyncio.TimeoutError:
            logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {connection_id}")
            await websocket.send_json({
                "error": "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            })
            
        except json.JSONDecodeError:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {connection_id}")
            await websocket.send_json({
                "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
            })
    
    except WebSocketDisconnect:
        logger.info(f"üëã WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º: {connection_id}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
        try:
            await websocket.send_json({
                "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
            })
        except:
            pass
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ElevenLabs
        if connection_id in app_state.elevenlabs_connections:
            elevenlabs_ws = app_state.elevenlabs_connections.pop(connection_id, None)
            if elevenlabs_ws and not elevenlabs_ws.closed:
                await elevenlabs_ws.close()
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if websocket in app_state.active_connections:
            app_state.active_connections.remove(websocket)
        
        logger.info(f"üßπ –ì–æ–ª–æ—Å–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {connection_id}")

async def forward_websocket_messages(source, target, connection_id, direction):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏"""
    try:
        if direction == "client_to_elevenlabs":
            # –û—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ ElevenLabs
            async for message in source:
                if isinstance(message, str):
                    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        data = json.loads(message)
                        await target.send_str(json.dumps(data))
                        app_state.stats["messages_received"] += 1
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ
                        if "audio" in data:
                            app_state.stats["audio_chunks_sent"] += 1
                            
                        logger.debug(f"üì§ {direction}: {type(message)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    except:
                        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        await target.send_str(message)
                        
                elif isinstance(message, bytes):
                    # –ë–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await target.send_bytes(message)
                    logger.debug(f"üì§ {direction}: –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                    
                else:
                    # WebSocketMessage
                    if message.type == aiohttp.WSMsgType.TEXT:
                        try:
                            data = json.loads(message.data)
                            await target.send_str(json.dumps(data))
                            
                            if "audio" in data:
                                app_state.stats["audio_chunks_sent"] += 1
                                
                        except:
                            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            await target.send_str(message.data)
                            
                    elif message.type == aiohttp.WSMsgType.BINARY:
                        await target.send_bytes(message.data)
                        
                    elif message.type == aiohttp.WSMsgType.CLOSED:
                        logger.info(f"WebSocket –∑–∞–∫—Ä—ã—Ç: {direction}")
                        break
                        
                    elif message.type == aiohttp.WSMsgType.ERROR:
                        logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {message.data}")
                        break
        
        else:
            # –û—Ç ElevenLabs –∫ –∫–ª–∏–µ–Ω—Ç—É
            async for message in source:
                if isinstance(message, str):
                    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        data = json.loads(message)
                        await target.send_text(json.dumps(data))
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ
                        if "audio" in data:
                            app_state.stats["audio_chunks_received"] += 1
                            
                        logger.debug(f"üì§ {direction}: {type(message)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    except:
                        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        await target.send_text(message)
                        
                elif isinstance(message, bytes):
                    # –ë–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await target.send_bytes(message)
                    logger.debug(f"üì§ {direction}: –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                    
                else:
                    # WebSocketMessage
                    if message.type == aiohttp.WSMsgType.TEXT:
                        try:
                            data = json.loads(message.data)
                            await target.send_text(json.dumps(data))
                            
                            if "audio" in data:
                                app_state.stats["audio_chunks_received"] += 1
                                
                        except:
                            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            await target.send_text(message.data)
                            
                    elif message.type == aiohttp.WSMsgType.BINARY:
                        await target.send_bytes(message.data)
                        
                    elif message.type == aiohttp.WSMsgType.CLOSED:
                        logger.info(f"WebSocket –∑–∞–∫—Ä—ã—Ç: {direction}")
                        break
                        
                    elif message.type == aiohttp.WSMsgType.ERROR:
                        logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {message.data}")
                        break
    
    except (WebSocketDisconnect, aiohttp.ClientError) as e:
        logger.info(f"üëã WebSocket –æ—Ç–∫–ª—é—á–µ–Ω ({direction}): {e}")
    
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ—Å—ã–ª–∫–µ ({direction}): {e}")

# ===== Main Function =====

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI –∑–∞–ø—É—Å–∫–∞"""
    print_banner()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä—è–º—ã–º WebSocket...")
    logger.info("üí° –≠—Ç–æ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    logger.info("üîó –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000 –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn
    config = uvicorn.Config(
        app=app,
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        log_level="info"
    )
    
    server = uvicorn.Server(config)
    await server.serve()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(0)
