#!/usr/bin/env python3
"""
ElevenLabs Conversational AI - Render.com Version
–í–µ–±-—Å–µ—Ä–≤–∏—Å –±–µ–∑ –∞—É–¥–∏–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è
"""

import asyncio
import logging
import os
import sys
import time
from pathlib import Path
from typing import Dict, Any

# FastAPI –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

from config import Config
from websocket_client import ElevenLabsWebSocketClient
from utils import setup_logging, print_banner

logger = logging.getLogger(__name__)

# ===== FastAPI Application =====

app = FastAPI(
    title="ElevenLabs Voice Assistant",
    description="–û–±–ª–∞—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ElevenLabs",
    version="3.0-render"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ===== Global State =====

class AppState:
    def __init__(self):
        self.config = None
        self.ws_client = None
        self.is_initialized = False
        self.start_time = time.time()
        self.stats = {
            "messages_received": 0,
            "connections": 0,
            "errors": 0
        }

app_state = AppState()

# ===== Startup/Shutdown =====

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ ElevenLabs —Å–µ—Ä–≤–∏—Å–∞...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        app_state.config = Config()
        if not app_state.config.validate():
            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ –∞—É–¥–∏–æ)
        app_state.ws_client = ElevenLabsWebSocketClient(
            api_key=app_state.config.ELEVENLABS_API_KEY,
            agent_id=app_state.config.ELEVENLABS_AGENT_ID,
            audio_handler=None  # –ë–µ–∑ –∞—É–¥–∏–æ –≤ –æ–±–ª–∞–∫–µ
        )
        
        app_state.is_initialized = True
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        app_state.is_initialized = False

@app.on_event("shutdown") 
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    
    if app_state.ws_client:
        try:
            await app_state.ws_client.disconnect()
        except:
            pass
    
    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# ===== HTTP Endpoints =====

@app.get("/", response_class=HTMLResponse)
async def get_homepage():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html>
    <head>
        <title>ElevenLabs Voice Assistant - Cloud</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 50px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
            .title { color: #333; text-align: center; margin-bottom: 30px; }
            .status { padding: 10px; border-radius: 5px; margin: 10px 0; }
            .status.ok { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
            .status.error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
            .api-section { margin: 20px 0; }
            .endpoint { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0; }
            .method { display: inline-block; padding: 3px 8px; border-radius: 3px; color: white; font-weight: bold; }
            .get { background: #28a745; }
            .post { background: #007bff; }
            .ws { background: #6f42c1; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1 class="title">üé§ ElevenLabs Voice Assistant</h1>
            <h2 class="title">Cloud Version - Render.com</h2>
            
            <div class="status ok">
                ‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç | –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <span id="uptime">calculating...</span>
            </div>
            
            <div class="api-section">
                <h3>üìã API Endpoints:</h3>
                
                <div class="endpoint">
                    <span class="method get">GET</span>
                    <strong>/health</strong> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
                </div>
                
                <div class="endpoint">
                    <span class="method get">GET</span>
                    <strong>/api/config</strong> - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
                </div>
                
                <div class="endpoint">
                    <span class="method get">GET</span>
                    <strong>/api/stats</strong> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
                </div>
                
                <div class="endpoint">
                    <span class="method post">POST</span>
                    <strong>/api/test-connection</strong> - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs
                </div>
                
                <div class="endpoint">
                    <span class="method ws">WS</span>
                    <strong>/ws</strong> - WebSocket –¥–ª—è real-time –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                </div>
            </div>
            
            <div class="api-section">
                <h3>üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
                <p>–≠—Ç–æ –æ–±–ª–∞—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –Ω–∞ Render.com.</p>
                <p>üéµ <strong>–ê—É–¥–∏–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</strong> –≤ –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥–µ.</p>
                <p>üíª –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å PyAudio.</p>
                <p>üîó API –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏.</p>
            </div>
            
            <div class="api-section">
                <h3>üöÄ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è:</h3>
                <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px;">
git clone &lt;repository&gt;
cd elevenlabs-python-cli
pip install -r requirements.txt
python run.py
                </pre>
            </div>
        </div>
        
        <script>
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
            function updateUptime() {
                fetch('/api/stats')
                    .then(response => response.json())
                    .then(data => {
                        const uptime = Math.floor(data.uptime);
                        const hours = Math.floor(uptime / 3600);
                        const minutes = Math.floor((uptime % 3600) / 60);
                        const seconds = uptime % 60;
                        document.getElementById('uptime').textContent = 
                            `${hours}—á ${minutes}–º ${seconds}—Å`;
                    })
                    .catch(() => {
                        document.getElementById('uptime').textContent = 'unavailable';
                    });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            updateUptime();
            setInterval(updateUptime, 5000);
        </script>
    </body>
    </html>
    """)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    if not app_state.is_initialized:
        raise HTTPException(status_code=503, detail="Service not initialized")
    
    return {
        "status": "healthy",
        "service": "ElevenLabs Voice Assistant",
        "version": "3.0-render",
        "timestamp": time.time(),
        "uptime": time.time() - app_state.start_time,
        "config": {
            "elevenlabs_configured": bool(app_state.config.ELEVENLABS_API_KEY),
            "agent_id": app_state.config.ELEVENLABS_AGENT_ID
        }
    }

@app.get("/api/config")
async def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if not app_state.is_initialized:
        raise HTTPException(status_code=503, detail="Service not initialized")
    
    return {
        "agent_id": app_state.config.ELEVENLABS_AGENT_ID,
        "audio_format": "PCM 16kHz (not available in cloud)",
        "features": {
            "websocket_api": True,
            "rest_api": True,
            "audio_interface": False,
            "cloud_deployment": True
        }
    }

@app.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    uptime = time.time() - app_state.start_time
    
    stats = {
        "uptime": uptime,
        "uptime_formatted": f"{uptime:.1f}s",
        "initialized": app_state.is_initialized,
        "messages_received": app_state.stats["messages_received"],
        "connections": app_state.stats["connections"],
        "errors": app_state.stats["errors"]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WebSocket –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if app_state.ws_client:
        client_stats = app_state.ws_client.get_statistics()
        stats.update({
            "elevenlabs_connected": client_stats["connected"],
            "conversation_id": client_stats["conversation_id"],
            "messages_sent": client_stats["messages_sent"]
        })
    
    return stats

@app.post("/api/test-connection")
async def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs"""
    if not app_state.is_initialized:
        raise HTTPException(status_code=503, detail="Service not initialized")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        test_client = ElevenLabsWebSocketClient(
            api_key=app_state.config.ELEVENLABS_API_KEY,
            agent_id=app_state.config.ELEVENLABS_AGENT_ID,
            audio_handler=None
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        result = await test_client.connect()
        
        if result:
            stats = test_client.get_statistics()
            await test_client.disconnect()
            
            return {
                "status": "success",
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs —É—Å–ø–µ—à–Ω–æ",
                "conversation_id": stats["conversation_id"],
                "timestamp": time.time()
            }
        else:
            return {
                "status": "error", 
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ElevenLabs",
                "timestamp": time.time()
            }
            
    except Exception as e:
        app_state.stats["errors"] += 1
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}",
            "timestamp": time.time()
        }

# ===== WebSocket Endpoint =====

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è real-time –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    await websocket.accept()
    app_state.stats["connections"] += 1
    
    try:
        logger.info("üîó –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await websocket.send_json({
            "type": "connection",
            "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs Voice Assistant",
            "features": {
                "audio": False,
                "text_api": True,
                "cloud_version": True
            }
        })
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                data = await websocket.receive_json()
                app_state.stats["messages_received"] += 1
                
                # –≠—Ö–æ –æ—Ç–≤–µ—Ç (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
                await websocket.send_json({
                    "type": "echo",
                    "original_message": data,
                    "timestamp": time.time(),
                    "note": "–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"
                })
                
            except WebSocketDisconnect:
                logger.info("üëã WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
                await websocket.send_json({
                    "type": "error",
                    "message": str(e)
                })
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket: {e}")
    
    finally:
        logger.info("üßπ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

# ===== Main Function =====

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI –∑–∞–ø—É—Å–∫–∞"""
    print_banner()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞...")
    logger.info("üí° –≠—Ç–æ –æ–±–ª–∞—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∞—É–¥–∏–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    logger.info("üîó –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000 –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn
    config = uvicorn.Config(
        app=app,
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        log_level="info"
    )
    
    server = uvicorn.Server(config)
    await server.serve()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(0)
