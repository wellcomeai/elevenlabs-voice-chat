#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ElevenLabs Conversational AI Assistant
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
"""

import os
import sys
import logging
import asyncio
import uvicorn
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ElevenLabs AI Assistant...")
    
    issues = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    elevenlabs_key = os.getenv("ELEVENLABS_API_KEY")
    if not elevenlabs_key:
        issues.append("‚ùå ELEVENLABS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞: https://elevenlabs.io/")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export ELEVENLABS_API_KEY=your_api_key")
    else:
        print("‚úÖ ElevenLabs API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–ª—é—á–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
        if len(elevenlabs_key) < 20:
            warnings.append("‚ö†Ô∏è  API –∫–ª—é—á –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Agent ID (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    agent_id = os.getenv("ELEVENLABS_AGENT_ID")
    if agent_id:
        print(f"‚úÖ Agent ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {agent_id[:8]}...")
    else:
        warnings.append("‚ö†Ô∏è  ELEVENLABS_AGENT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 8):
        issues.append("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
    else:
        print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version.split()[0]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    required_files = ["app.py", "requirements.txt"]
    for file in required_files:
        if not Path(file).exists():
            issues.append(f"‚ùå –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚úÖ {file} –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ index.html
    if not Path("index.html").exists():
        warnings.append("‚ö†Ô∏è  index.html –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback)")
    else:
        print("‚úÖ index.html –Ω–∞–π–¥–µ–Ω")
    
    return issues, warnings

def print_setup_instructions():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    print("\n" + "="*60)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï")
    print("="*60)
    
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ ElevenLabs API –∫–ª—é—á:")
    print("   ‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://elevenlabs.io/")
    print("   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Profile Settings")
    print("   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ API Key")
    
    print("\n2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   Linux/Mac:")
    print("   export ELEVENLABS_API_KEY=your_api_key_here")
    print("   export ELEVENLABS_AGENT_ID=your_agent_id  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
    print("\n   Windows:")
    print("   set ELEVENLABS_API_KEY=your_api_key_here")
    print("   set ELEVENLABS_AGENT_ID=your_agent_id     # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
    
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞):")
    print("   ELEVENLABS_API_KEY=your_api_key_here")
    print("   ELEVENLABS_AGENT_ID=your_agent_id")
    
    print("\n4Ô∏è‚É£ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:")
    print("   ‚Ä¢ –í–æ–π–¥–∏—Ç–µ –≤ ElevenLabs dashboard")
    print("   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ Conversational AI Agent")
    print("   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Agent ID")
    
    print("\n5Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("   pip install -r requirements.txt")

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        import fastapi
        print("‚úÖ FastAPI")
    except ImportError:
        print("‚ùå FastAPI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
        
    try:
        import websockets
        print("‚úÖ WebSockets")
    except ImportError:
        print("‚ùå WebSockets –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
        
    try:
        import uvicorn
        print("‚úÖ Uvicorn")
    except ImportError:
        print("‚ùå Uvicorn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    return True

def create_env_file_template():
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞"""
    env_template = """# ElevenLabs Conversational AI Configuration
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –í–∞—à API –∫–ª—é—á –æ—Ç ElevenLabs
ELEVENLABS_API_KEY=your_elevenlabs_api_key_here

# –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: ID –≤–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π)
ELEVENLABS_AGENT_ID=your_agent_id_here

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT=8000
LOG_LEVEL=info
"""
    
    with open(".env.template", "w", encoding="utf-8") as f:
        f.write(env_template)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env.template")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ ElevenLabs Conversational AI Assistant")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    issues, warnings = check_environment()
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if warnings:
        print("\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
        for warning in warnings:
            print(f"   {warning}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if issues:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"   {issue}")
        
        print_setup_instructions()
        create_env_file_template()
        
        response = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø—É—Å–∫ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã? (y/N): ")
        if response.lower() != 'y':
            print("üëã –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")
            return sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not test_imports():
        print("\n‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt")
        return sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        from dotenv import load_dotenv
        if Path(".env").exists():
            load_dotenv()
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª")
    except ImportError:
        pass  # python-dotenv –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    
    print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞:")
    print(f"   ‚Ä¢ –ü–æ—Ä—Ç: {os.getenv('PORT', 8000)}")
    print(f"   ‚Ä¢ API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if os.getenv('ELEVENLABS_API_KEY') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"   ‚Ä¢ Agent ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if os.getenv('ELEVENLABS_AGENT_ID') else '‚ö†Ô∏è  –ü—É–±–ª–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç'}")
    
    print("\nüîó –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ:")
    port = os.getenv("PORT", 8000)
    print(f"   ‚Ä¢ http://localhost:{port}")
    print(f"   ‚Ä¢ http://127.0.0.1:{port}")
    
    print("\nüéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–≤–æ—Ä —Å AI")
    print("   ‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏")
    print("   ‚Ä¢ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏")
    print("   ‚Ä¢ Voice Activity Detection")
    print("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–±–∏–≤–∞–Ω–∏–π")
    
    print("\n" + "=" * 50)
    print("üé§ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        port = int(os.getenv("PORT", 8000))
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        from app import app
        
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=port,
            log_level="info",
            reload=False  # –û—Ç–∫–ª—é—á–∞–µ–º reload –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        )
        
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        sys.exit(1)

if __name__ == "__main__":
    main()
