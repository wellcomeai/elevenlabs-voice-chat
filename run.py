#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Voice Assistant
"""

import uvicorn
import sys
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    elevenlabs_key = os.getenv("ELEVENLABS_API_KEY")
    openai_key = os.getenv("OPENAI_API_KEY")
    
    if not elevenlabs_key or elevenlabs_key == "your_elevenlabs_key":
        issues.append("‚ùå ELEVENLABS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export ELEVENLABS_API_KEY=your_key")
    else:
        print("‚úÖ ElevenLabs API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    
    if not openai_key or openai_key == "your_openai_key":
        issues.append("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export OPENAI_API_KEY=your_key")
    else:
        print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 8):
        issues.append("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
    else:
        print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    return issues

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Voice Assistant - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    issues = check_environment()
    
    if issues:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"   {issue}")
        print("\nüí° –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω—ã API –∫–ª—é—á–∏:")
        print("   1. ElevenLabs API Key: https://elevenlabs.io/")
        print("   2. OpenAI API Key: https://platform.openai.com/")
        print("\nüìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export ELEVENLABS_API_KEY=your_elevenlabs_key")
        print("   export OPENAI_API_KEY=your_openai_key")
        print("\n‚ö†Ô∏è  –ë–ï–ó –ö–õ–Æ–ß–ï–ô –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        
        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø—É—Å–∫? (y/N): ")
        if response.lower() != 'y':
            return sys.exit(1)
    
    print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print("   - –ü–æ—Ä—Ç: 8000")
    print("   - –•–æ—Å—Ç: 0.0.0.0")
    print("   - –†–µ–∂–∏–º: Production")
    
    print("\nüîó –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ:")
    print("   - http://localhost:8000")
    print("   - http://127.0.0.1:8000")
    
    print("\nüéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("   1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º")
    print("   2. –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –≥—Ä–æ–º–∫–æ")
    print("   3. –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏")
    print("   4. –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    
    print("\n" + "=" * 50)
    print("üé§ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        uvicorn.run(
            "app:app",
            host="0.0.0.0", 
            port=8000,
            log_level="info",
            reload=False
        )
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        sys.exit(1)

if __name__ == "__main__":
    main()
